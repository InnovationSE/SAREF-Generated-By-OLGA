/**
* This file is automatically generated by OLGA
* @author OLGA
* @version 1.0
*/
package w3id.org.saref;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldId;
import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldProperty;
import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldType;
import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldLink;
import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldPropertyType;

import saref.jsonld.util.RefId;

import w3id.org.saref.IUnitOfMeasure;  
import w3id.org.saref.IProperty;  






public  class Measurement implements IMeasurement {

	Map<String, List<RefId>> relations;
	
	public Measurement(String id) {
		super();
		this.id = "https://w3id.org/saref#" + id;
		relations = new HashMap<String, List<RefId>>();
		isMeasuredInExactlyUnitOfMeasure = new ArrayList<>();
		isMeasuredInOnlyUnitOfMeasure = new ArrayList<>();
		relatesToPropertyExactlyProperty = new ArrayList<>();
		relatesToPropertyOnlyProperty = new ArrayList<>();
		
	}

	@JsonldId
	public String id;
	
	@JsonIgnore
	public RefId getRefId()
	{
		return new RefId(id);
	}
	
	@JsonInclude(Include.NON_NULL)
	@JsonProperty("@type")
	public String getType()
	{
		return "https://w3id.org/saref#Measurement";
	}
	
	@JsonInclude(Include.NON_EMPTY)
	@JsonldPropertyType(id = "https://w3id.org/saref#hasTimestamp", type = "owl:DatatypeProperty")
	@JsonProperty("https://w3id.org/saref#hasTimestamp")
	public java.util.Calendar hasTimestamp;
			
	@JsonInclude(Include.NON_EMPTY)
	@JsonldPropertyType(id = "https://w3id.org/saref#hasValue", type = "owl:DatatypeProperty")
	@JsonProperty("https://w3id.org/saref#hasValue")
	public Float hasValue;
			
	@JsonInclude(Include.NON_EMPTY)
	@JsonldProperty("https://w3id.org/saref#isMeasuredIn") 
	private List<RefId> isMeasuredInExactlyUnitOfMeasure;
	public void addisMeasuredInExactly1(IUnitOfMeasure parameter)
	{
		isMeasuredInExactlyUnitOfMeasure.add(parameter.getRefId());
	}
	@JsonInclude(Include.NON_EMPTY)
	@JsonldProperty("https://w3id.org/saref#isMeasuredIn") 
	private List<RefId> isMeasuredInOnlyUnitOfMeasure;
	public void addisMeasuredInOnly(IUnitOfMeasure parameter)
	{
		isMeasuredInOnlyUnitOfMeasure.add(parameter.getRefId());
	}
	@JsonInclude(Include.NON_EMPTY)
	@JsonldProperty("https://w3id.org/saref#relatesToProperty") 
	private List<RefId> relatesToPropertyExactlyProperty;
	public void addrelatesToPropertyExactly1(IProperty parameter)
	{
		relatesToPropertyExactlyProperty.add(parameter.getRefId());
	}
	@JsonInclude(Include.NON_EMPTY)
	@JsonldProperty("https://w3id.org/saref#relatesToProperty") 
	private List<RefId> relatesToPropertyOnlyProperty;
	public void addrelatesToPropertyOnly(IProperty parameter)
	{
		relatesToPropertyOnlyProperty.add(parameter.getRefId());
	}
	
	
	
	
	@JsonInclude(Include.NON_EMPTY)
	@JsonProperty("https://w3id.org/saref#isMeasuredIn")
	public List<RefId> getisMeasuredInUnitOfMeasure()
	{
		return isMeasuredInExactlyUnitOfMeasure;
	}
	@JsonInclude(Include.NON_EMPTY)
	@JsonProperty("https://w3id.org/saref#relatesToProperty")
	public List<RefId> getrelatesToPropertyProperty()
	{
		return relatesToPropertyExactlyProperty;
	}
	
}
