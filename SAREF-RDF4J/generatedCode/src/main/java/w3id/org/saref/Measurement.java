/**
* This file is automatically generated by OLGA
* @author OLGA
* @version 1.0
*/
package w3id.org.saref;

import saref.global.util.GLOBAL;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.vocabulary.RDF;

import java.math.BigDecimal;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.Date;


import w3id.org.saref.IUnitOfMeasure;  
import w3id.org.saref.IProperty;  
	


public  class Measurement implements IMeasurement {

	IRI newInstance;
	
	public Measurement(String namespace, String instanceId) {
		super();
		newInstance = GLOBAL.factory.createIRI(namespace, instanceId);
		GLOBAL.model.add(newInstance, RDF.TYPE, GLOBAL.factory.createIRI("https://w3id.org/saref#Measurement"));
	}

	public IRI iri()
	{
		return newInstance;
	}

	public void setHastimestamp(Date param)
	{
	 GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#hasTimestamp"), GLOBAL.factory.createLiteral(param));
	}
			
	public void setHasvalue(float param)
	{
	 GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#hasValue"), GLOBAL.factory.createLiteral(param));
	}
			
	
	public void addIsmeasuredin_Exactly1(IUnitOfMeasure parameter)
	{
		GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#isMeasuredIn"), parameter.iri());
	}
	public void addIsmeasuredin_Only(IUnitOfMeasure parameter)
	{
		GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#isMeasuredIn"), parameter.iri());
	}
	public void addRelatestoproperty_Exactly1(IProperty parameter)
	{
		GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#relatesToProperty"), parameter.iri());
	}
	public void addRelatestoproperty_Only(IProperty parameter)
	{
		GLOBAL.model.add(newInstance, GLOBAL.factory.createIRI("https://w3id.org/saref#relatesToProperty"), parameter.iri());
	}
	
}
