<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RomanticWeb</name>
    </assembly>
    <members>
        <member name="M:RomanticWeb.Collections.DependencyTree`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Collections.DependencyTree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Collections.DependencyTree`1.DependencyTreeEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Collections.DependencyTree`1.DependencyTreeEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Collections.DependencyTree`1.DependencyTreeEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Collections.DependencyTree`1.DependencyTreeEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Collections.DependencyTree`1.DependencyTreeEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Collections.IDependentComponent">
            <summary>Defines a contract of a component that depends on another component's types.</summary>
        </member>
        <member name="P:RomanticWeb.Collections.IDependentComponent.Requires">
            <summary>Gets an enumeration of types this component depends on.</summary>
        </member>
        <member name="T:RomanticWeb.Collections.IDictionaryEntry`2">
            <summary>
            Entity type for RDF dictionary entries (key/value pairs)
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:RomanticWeb.Collections.IDictionaryEntry`2.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:RomanticWeb.Collections.IDictionaryEntry`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:RomanticWeb.Collections.IDictionaryOwner`3">
            <summary>
            Base <see cref="T:RomanticWeb.Entities.IEntity" /> type for RDF dictionary
            </summary>
            <typeparam name="TEntry">The type of the dictionary entry entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:RomanticWeb.Collections.IDictionaryOwner`3.DictionaryEntries">
            <summary>
            Gets or sets the dictionary entries.
            </summary>
        </member>
        <member name="T:RomanticWeb.Collections.IRdfListNode`1">
            <summary>Represents a rdf:List node, typed for a specific collection element of type <typeparamref name="T"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Collections.IRdfListNode`1.Rest">
            <summary>Gets or sets next list node.</summary>
        </member>
        <member name="P:RomanticWeb.Collections.IRdfListNode`1.First">
            <summary>Gets or sets the current node's list element.</summary>
        </member>
        <member name="T:RomanticWeb.Collections.IRdfListOwner">
            <summary>
            Represents an entity, which has a relation to
            </summary>
        </member>
        <member name="P:RomanticWeb.Collections.IRdfListOwner.ListHead">
            <summary>
            Gets the first node of the rdf:List.
            </summary>
        </member>
        <member name="T:RomanticWeb.Collections.TopologicSortExtensions">
            <summary>Extension method to implement topologic sorting. Will return a list where items with dependencies will come after items without dependencies.</summary>
            <remarks>From http://stackoverflow.com/questions/21189222/topological-sort-with-support-for-cyclic-dependencies .</remarks>
        </member>
        <member name="M:RomanticWeb.Collections.TopologicSortExtensions.TopologicSort(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Type,System.Collections.Generic.IList{RomanticWeb.Mapping.Providers.IEntityMappingProvider}}})">
            <summary>Sorts a list of items with dependencies such that items without dependencies come first.</summary>
            <param name="graph">List of items to sort.</param>
            <returns>A sorted list of item, where items with dependencies after items without dependencies.</returns>
        </member>
        <member name="T:RomanticWeb.BaseUriSelectorBuilder">
            <summary>
            Exposes methods to define how base <see cref="T:System.Uri"/>s
            are selected for relative identifiers
            </summary>
        </member>
        <member name="P:RomanticWeb.BaseUriSelectorBuilder.Default">
            <summary>
            Gets the builder for default base <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="T:RomanticWeb.ComponentModel.CompositionRootBase">
            <summary>Base class for changing Romantic Web components.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.EntityContext``1">
            <summary>Sets the <see cref="T:RomanticWeb.IEntityContext"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.BlankNodeIdGenerator``1">
            <summary>Sets the <see cref="T:RomanticWeb.Entities.IBlankNodeIdGenerator"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.Ontology``1">
            <summary>Adds a <see cref="T:RomanticWeb.Ontologies.IOntologyProvider"/>.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.NamedGraphSelector``1">
            <summary>Sets the <see cref="T:RomanticWeb.NamedGraphs.INamedGraphSelector"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.EntityStore``1">
            <summary>Sets the <see cref="T:RomanticWeb.IEntityStore"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.Convention``1(System.Action{``0})">
            <summary>Adds <see cref="T:RomanticWeb.Mapping.Conventions.IConvention"/> implementation type, with optional setup.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.FallbackNodeConverter``1">
            <summary>Sets the <see cref="T:RomanticWeb.Converters.IFallbackNodeConverter"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.MappingFrom``1">
            <summary>Adds a <see cref="T:RomanticWeb.Mapping.IMappingFrom" />.</summary>
            <typeparam name="TMappingFrom">Type of the mapping source.</typeparam>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.MappingModelVisitor``1">
            <summary>Adds a <see cref="T:RomanticWeb.Mapping.Visitors.IMappingModelVisitor"/>.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.OntologyLoader``1">
            <summary>Adds a <see cref="T:RomanticWeb.Ontologies.IOntologyLoader"/>.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.RdfTypeCache``1">
            <summary>Sets the <see cref="T:RomanticWeb.Mapping.IRdfTypeCache"/> implementation type.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.MappingProviderVisitor``1">
            <summary>Adds a <see cref="T:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor"/>.</summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.SharedComponent``2(System.String)">
            <summary>Registers a custom dependency type. It will be shared between all <see cref="M:RomanticWeb.ComponentModel.CompositionRootBase.EntityContext``1"/>s.</summary>
            <typeparam name="TComponent">The type of the dependency.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="name">Optional name.</param>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.SharedComponent``1(``0,System.String)">
            <summary>Registers a custom dependency instance. It will be shared between all <see cref="M:RomanticWeb.ComponentModel.CompositionRootBase.EntityContext``1"/>s.</summary>
            <typeparam name="TComponent">The type of the dependency.</typeparam>
            <param name="instance">An instance of <typeparamref name="TComponent"/></param>
            <param name="name">Optional name.</param>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.TransientComponent``2(System.String)">
            <summary>Registers a custom dependency type. A new instance will be created every time it is requested.</summary>
            <typeparam name="TComponent">The type of the dependency.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="name">Optional name.</param>
        </member>
        <member name="M:RomanticWeb.ComponentModel.CompositionRootBase.PerEntityContextComponent``2(System.String)">
            <summary>Registers a custom dependency type. A new instance will be created for each <see cref="M:RomanticWeb.ComponentModel.CompositionRootBase.EntityContext``1"/>.</summary>
            <typeparam name="TComponent">The type of the dependency.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="name">Optional name.</param>
        </member>
        <member name="T:RomanticWeb.ComponentModel.IComponentRegistryFacade">
            <summary>
            A façade, which exposes the service container held by the <see cref="T:RomanticWeb.EntityContextFactory" />
            </summary>
            <remarks>It shouldn't be used from consumer code</remarks>
        </member>
        <member name="M:RomanticWeb.ComponentModel.IComponentRegistryFacade.Register``2">
            <summary>
            Registers a type with the service container
            </summary>
        </member>
        <member name="M:RomanticWeb.ComponentModel.IComponentRegistryFacade.Register``1(``0)">
            <summary>
            Registers an instance with the service container
            </summary>
        </member>
        <member name="T:RomanticWeb.Configuration.BaseUriElement">
            <summary>Configuration element to set base Uri for.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.BaseUriElement.Default">
            <summary>Gets or sets the default base Uri.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.FactoriesCollection">
            <summary>A collection of factory configuration elements.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoriesCollection.Item(System.String)">
            <summary>Gets the <see cref="T:RomanticWeb.Configuration.FactoryElement"/> with the specified name.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.FactoriesCollection.CreateNewElement">
            <summary>Creates a new <see cref="T:RomanticWeb.Configuration.FactoryElement"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.FactoriesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>Gets <see cref="P:RomanticWeb.Configuration.FactoryElement.Name"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.FactoryElement">
            <summary>Configuration of a ecntity context factory.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.Name">
            <summary>Gets or sets the name.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.ThreadSafe">
            <summary>Gets or sets a flag indicating whether the internal mechanisms should be thread-safe.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.TrackChanges">
            <summary>Gets or sets a flag indicating whether the changes should be tracked.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.MappingAssemblies">
            <summary>Gets or sets the mapping assemblies.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.Ontologies">
            <summary>Gets or sets the ontologies configuration element collection.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.BaseUris">
            <summary>Gets or sets the base uri configuration element.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.FactoryElement.MetaGraphUri">
            <summary>Gets or sets the meta graph URI.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.MappingAssembliesCollection">
            <summary>Collection of mapping assemblies configuration elements.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.MappingAssembliesCollection.CreateNewElement">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Configuration.MappingAssemblyElement"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.MappingAssembliesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>Gets <see cref="P:RomanticWeb.Configuration.MappingAssemblyElement.Assembly"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.MappingAssemblyElement">
            <summary>Mapping assembly configuration element.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.MappingAssemblyElement.Assembly">
            <summary>Gets or sets the assembly name.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.OntologiesCollection">
            <summary>Collection of ontology configuration elements.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.OntologiesCollection.CreateNewElement">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Configuration.OntologyElement"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.OntologiesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>Returns <see cref="P:RomanticWeb.Configuration.OntologyElement.Prefix"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.OntologyElement">
            <summary>An ontology configuration element.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.OntologyElement.Prefix">
            <summary>Gets or sets the ontology prefix.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.OntologyElement.Uri">
            <summary>Gets or sets the ontology URI.</summary>
        </member>
        <member name="T:RomanticWeb.Configuration.ConfigurationSectionHandler">
            <summary>Configuration section for RomanticWeb.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.ConfigurationSectionHandler.Default">
            <summary>Gets the configuration from default configutarion section.</summary>
        </member>
        <member name="P:RomanticWeb.Configuration.ConfigurationSectionHandler.Factories">
            <summary>Gets or sets the collection of factory configurations.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.ConfigurationSectionHandler.GetConfiguration(System.String)">
            <summary>Gets a configuration by it's <paramref name="name"/>.</summary>
            <param name="name">The name of the configuration to obtain.</param>
            <returns>Configuration section of a given <paramref name="name"/> or empty configuration.</returns>
        </member>
        <member name="T:RomanticWeb.Configuration.UriValidator">
            <summary>Provides validation of <see cref="T:System.Uri"/> values.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.UriValidator.CanValidate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Configuration.UriValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Configuration.UriValidatorAttribute">
            <summary>Declaratively instructs the .NET Framework to perform Uri validation on a configuration property. This class cannot be inherited.</summary>
        </member>
        <member name="M:RomanticWeb.Configuration.UriValidatorAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Configuration.UriValidatorAttribute"/> class.</summary>
        </member>
        <member name="T:RomanticWeb.Converters.AsEntityConverter`1">
            <summary>Changes <see cref="T:RomanticWeb.Entities.IEntity"/> type by calling <see cref="M:RomanticWeb.Entities.EntityExtensions.AsEntity``1(RomanticWeb.Entities.IEntity)"/> method.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.AsEntityConverter`1.#ctor">
            <summary>Creates instance of the <see cref="T:RomanticWeb.Entities.IBaseUriSelectionPolicy"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.AsEntityConverter`1.#ctor(RomanticWeb.Entities.IBaseUriSelectionPolicy)">
            <summary>Creates instance of the <see cref="T:RomanticWeb.Entities.IBaseUriSelectionPolicy"/>.</summary>
            <param name="baseUriSelectionPolicy">Base Uri selection policy.</param>
        </member>
        <member name="M:RomanticWeb.Converters.AsEntityConverter`1.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <summary>Converts entity.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.AsEntityConverter`1.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts an entity back to <see cref="T:RomanticWeb.Model.Node" />.</summary>
        </member>
        <member name="T:RomanticWeb.Converters.Base64BinaryConverter">
            <summary>Converts Base64 literals.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.Base64BinaryConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts given array of bytes to it's base64 representation.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.Base64BinaryConverter.CanConvert(RomanticWeb.Model.INode)">
            <summary>Checks for ability to convert given data type.</summary>
            <param name="literalNode"></param>
            <returns><b>true</b> if the data type is Base64 binary; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Converters.Base64BinaryConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.Base64BinaryConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <summary>Converts given Base64 binary literal into an array of bytes.</summary>
            <param name="objectNode">Node with Base64 binary literal.</param>
            <returns>Array of bytes or null if the passed node is also null.</returns>
        </member>
        <member name="T:RomanticWeb.Converters.ConverterCatalog">
            <summary>Default implementation of <see cref="T:RomanticWeb.Converters.IConverterCatalog"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.ConverterCatalog.#ctor(RomanticWeb.ComponentModel.GetConverterDelegate,RomanticWeb.ComponentModel.GetAllConvertersDelegate)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Converters.ConverterCatalog"/> class.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.ConverterCatalog.UriNodeConverters">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Converters.ConverterCatalog.LiteralNodeConverters">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.ConverterCatalog.GetConverter(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Converters.DefaultUriConverter">
            <summary>Generic converter for any type of entity id.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DefaultUriConverter.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <summary>Converts an uri node to URI.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DefaultUriConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Converters.IConverterCatalog">
            <summary>Contract for implementing a catalog converter.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.IConverterCatalog.UriNodeConverters">
            <summary>Gets the URI node converters.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.IConverterCatalog.LiteralNodeConverters">
            <summary>Gets the literal node converters.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.IConverterCatalog.GetConverter(System.Type)">
            <summary>Gets the converter.</summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="T:RomanticWeb.Converters.EntityIdConverter">
            <summary>Statically typed converter for <see cref="T:RomanticWeb.Entities.EntityId"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter.#ctor">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.Converters.EntityIdConverter"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter.#ctor(RomanticWeb.Entities.IBaseUriSelectionPolicy)">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.Converters.EntityIdConverter"/>.</summary>
            <param name="baseUriSelectionPolicy">Base Uri selection policy.</param>
        </member>
        <member name="T:RomanticWeb.Converters.EntityIdConverter`1">
            <summary>Generic converter for any type of entity id.</summary>
            <typeparam name="TEntityId">Type of the entity identifier.</typeparam>
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter`1.#ctor">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.Converters.EntityIdConverter`1"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter`1.#ctor(RomanticWeb.Entities.IBaseUriSelectionPolicy)">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.Converters.EntityIdConverter`1"/>.</summary>
            <param name="baseUriSelectionPolicy">Base Uri selection policy.</param>
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter`1.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter`1.CanConvert(RomanticWeb.Entities.IEntity,RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.EntityIdConverter`1.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Converters.GuidConverter">
            <summary>Converter for GUID literal nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.GuidConverter.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.GuidConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.GuidConverter.CanConvert(RomanticWeb.Model.Node)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Converters.FallbackNodeConverter">
            <summary>Default converter for <see cref="T:RomanticWeb.Model.Node"/>s to value objects or entities.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.FallbackNodeConverter.#ctor(RomanticWeb.Converters.IConverterCatalog)">
            <summary>Constructor with entity context passed.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.FallbackNodeConverter.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <summary>Converts a node to a correct value based on type (URI, blank or literal) or it's datatype in the case of literal nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.FallbackNodeConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Converters.StringConverter">
            <summary>Converts string literals.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.StringConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.StringConverter.CanConvert(RomanticWeb.Model.INode)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.StringConverter.CanConvertBack(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.StringConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Converters.BooleanConverter">
            <summary>Converter for xsd:boolean.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.BooleanConverter.SupportedDataTypes">
            <summary>Gets Uri of xsd:boolean.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.BooleanConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts a bool value to it's XML string representation.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.BooleanConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.BooleanConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <summary>Converts xsd:boolean to <see cref="T:System.Boolean"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Converters.DateTimeConverter">
            <summary>Converts xsd:date and xsd:datetime to <see cref="T:System.DateTime"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.DateTimeConverter.SupportedDataTypes">
            <summary>Gets xsd date datatypes.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DateTimeConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts date value to it's string representation.</summary>
            <param name="value">The date-time value.</param>
            <param name="context">Owning entity context.</param>
        </member>
        <member name="M:RomanticWeb.Converters.DateTimeConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.DateTimeConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Converters.DecimalConverter">
            <summary>Converter for xsd:decimal.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.DecimalConverter.SupportedDataTypes">
            <summary>Gets Uri of xsd:decimal.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DecimalConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts the decimal value to a literal node.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DecimalConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.DecimalConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Converters.DoubleConverter">
            <summary>Convert XSD floating point numbers to doubles.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.DoubleConverter.SupportedDataTypes">
            <summary>Gets Uris of xsd floating point types.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DoubleConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.DoubleConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.DoubleConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Converters.DurationConverter">
            <summary>Converts xsd:duration to <see cref="T:System.TimeSpan"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.DurationConverter.SupportedDataTypes">
            <summary>=Gets Uri of xsd:duration.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.DurationConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.DurationConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.DurationConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Converters.IntegerConverter">
            <summary>Converts XSD numeric types to numbers.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.IntegerConverter.SupportedTypes">
            <summary>Gets the supported .NET types.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.IntegerConverter.SupportedDataTypes">
            <summary>Gets xsd integral numeric datatypes.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.IntegerConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Converters.IntegerConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.IntegerConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <summary>Converts xsd:int (and subtypes) into <see cref="T:System.Int64"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Converters.XsdConverterBase">
            <summary>A base class for converting XSD-typed literals.</summary>
        </member>
        <member name="P:RomanticWeb.Converters.XsdConverterBase.SupportedDataTypes">
            <summary>Get the XSD datatypes, which this converter supports.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.XsdConverterBase.CanConvert(RomanticWeb.Model.INode)">
            <summary>Check if a converter can convert the given XSD datatype.</summary>
        </member>
        <member name="T:RomanticWeb.Converters.LiteralNodeConverter">
            <summary>Defines a contract for converting literal nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.LiteralNodeConverter.CanConvert(RomanticWeb.Model.INode)">
            <summary>Check if a converter can convert the given RDF data type.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.LiteralNodeConverter.Convert(RomanticWeb.Model.INode,RomanticWeb.IEntityContext)">
            <summary>Converts the given node to an object.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.LiteralNodeConverter.ConvertBack(System.Object,RomanticWeb.IEntityContext)">
            <summary>Converts the given value to a literal node.</summary>
        </member>
        <member name="M:RomanticWeb.Converters.LiteralNodeConverter.CanConvertBack(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Converters.LiteralNodeConverter.ConvertInternal(RomanticWeb.Model.INode)">
            <summary>Does the actual convertion.</summary>
        </member>
        <member name="T:RomanticWeb.DefaultUriBuilder">
            <summary>
            Exposes methods to define fallback base URI for relative paths
            </summary>
        </member>
        <member name="M:RomanticWeb.DefaultUriBuilder.Is(System.Uri)">
            <summary>
            Sets the default <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="T:RomanticWeb.Diagnostics.LazyResolvedLogger">
            <summary>Provides a lazily resolved logger.</summary>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LazyResolvedLogger.#ctor(System.Func{RomanticWeb.Diagnostics.ILogger})">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Diagnostics.LazyResolvedLogger" /> class.</summary>
            <param name="loggerFactoryMethod">Logging facility factory method.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LazyResolvedLogger.Log(RomanticWeb.Diagnostics.LogLevel,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Diagnostics.LazyResolvedLogger.Log(RomanticWeb.Diagnostics.LogLevel,System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Diagnostics.LoggerExtensions">
            <summary>Provides useful <see cref="T:RomanticWeb.Diagnostics.ILogger" /> extensions.</summary>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Fatal(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>Logs a fatal error.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Fatal(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Logs a fatal error with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Error(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>Logs an error.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Error(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Logs an error with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Warning(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>Logs a warning.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Warning(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Logs an information with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Info(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>Logs a warning.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Info(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Logs an information with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Trace(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>A trace log.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Trace(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Traces with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Debug(RomanticWeb.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>A debug log.</summary>
            <param name="logger">Target logger.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="M:RomanticWeb.Diagnostics.LoggerExtensions.Debug(RomanticWeb.Diagnostics.ILogger,System.Exception,System.String,System.Object[])">
            <summary>Debug with exception.</summary>
            <param name="logger">Target logger.</param>
            <param name="exception">Exception to be logged.</param>
            <param name="message">Message format string.</param>
            <param name="arguments">Message format string arguments.</param>
        </member>
        <member name="T:RomanticWeb.Diagnostics.SimpleLogger">
            <summary>Exposes a simple logging facility.</summary>
        </member>
        <member name="M:RomanticWeb.Diagnostics.SimpleLogger.Log(RomanticWeb.Diagnostics.LogLevel,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Diagnostics.SimpleLogger.Log(RomanticWeb.Diagnostics.LogLevel,System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.DictionaryCache">
            <summary>
            Basic in-memory cache
            </summary>
        </member>
        <member name="T:RomanticWeb.Dynamic.DictionaryEntityNames">
            <summary>Contains the type names of dictionary IEntities, which are used to access dictionary triples.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.OwnerTypeFullyQualifiedName">
            <summary>Gets the fully qualified name of the dictionary owner type .</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.EntryTypeFullyQualifiedName">
            <summary>Gets the fully qualified name of the dictionary entry type.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.OwnerTypeName">
            <summary>Gets the name of the dictionary owner type.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.EntryTypeName">
            <summary>Gets the name of the dictionary entry type.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.FullOwnerTypeName">
            <summary>Gets the full name of the dictionary owner type.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.FullEntryTypeName">
            <summary>Gets the full name of the dictionary entry type.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.DictionaryEntityNames.Namespace">
            <summary>Gets the dictionary types' namespace.</summary>
        </member>
        <member name="T:RomanticWeb.Dynamic.DefaultDictionaryTypeProvider">
            <summary>
            Default implementation of <see cref="T:RomanticWeb.Dynamic.IDictionaryTypeProvider"/>, 
            which assumes dictionary types are named according to a pattern 
            based on original entity type name and property details.
            </summary>
        </member>
        <member name="M:RomanticWeb.Dynamic.DefaultDictionaryTypeProvider.#ctor(RomanticWeb.Dynamic.EmitHelper)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Dynamic.DefaultDictionaryTypeProvider"/> class.</summary>
            <param name="emitHelper">The code emitter helper.</param>
        </member>
        <member name="M:RomanticWeb.Dynamic.DefaultDictionaryTypeProvider.GetEntryType(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Dynamic.DefaultDictionaryTypeProvider.GetOwnerType(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Dynamic.IDictionaryTypeProvider">
            <summary>
            Contract for implementing classes, which provide
            types of generated dictionary owner and entry classes
            </summary>
        </member>
        <member name="M:RomanticWeb.Dynamic.IDictionaryTypeProvider.GetEntryType(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <summary>
            Gets the type of the dictionary entry.
            </summary>
        </member>
        <member name="M:RomanticWeb.Dynamic.IDictionaryTypeProvider.GetOwnerType(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <summary>
            Gets the type of the dictionary owner.
            </summary>
        </member>
        <member name="T:RomanticWeb.Dynamic.OntologyAccessor">
            <summary>Allows dynamic resolution of prediacte URIs based dynamic member name and Ontology prefix.</summary>
            todo: make a DynamicObject
        </member>
        <member name="M:RomanticWeb.Dynamic.OntologyAccessor.#ctor(RomanticWeb.Entities.Entity,RomanticWeb.Ontologies.IOntology,RomanticWeb.Converters.INodeConverter,RomanticWeb.Entities.IResultTransformerCatalog)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Dynamic.OntologyAccessor"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Dynamic.OntologyAccessor.Ontology">
            <summary>Gets the underlying <see cref="T:RomanticWeb.Ontologies.Ontology"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Dynamic.OntologyAccessor.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>Tries to retrieve subjects from the backing RDF source for a dynamically resolved property.</summary>
        </member>
        <member name="T:RomanticWeb.Entities.BlankId">
            <summary>A Blank Node identifier.</summary>
            <remarks>Internally it is stored as a node:// URI, similarily to the Virtuoso way</remarks>
        </member>
        <member name="M:RomanticWeb.Entities.BlankId.#ctor(System.String,RomanticWeb.Entities.EntityId,System.Uri)">
            <summary>Constructor for creating blank node idenifiers from scratch.</summary>
            <param name="identifier">Internal identifier.</param>
            <param name="root">Optional owning <see cref="T:RomanticWeb.Entities.IEntity" />'s identifier.</param>
            <param name="graphUri">Optional graph Uri.</param>
        </member>
        <member name="P:RomanticWeb.Entities.BlankId.RootEntityId">
            <summary>Gets the identifier of a root non-blank entity.</summary>
        </member>
        <member name="P:RomanticWeb.Entities.BlankId.Identifier">
            <summary>Gets the internal identifier of this blank node.</summary>
        </member>
        <member name="P:RomanticWeb.Entities.BlankId.Graph">
            <summary>Gets the graph Uri of this blank node.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.BlankId.ToString(System.Boolean)">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <param name="nQuadFormat">if set to <c>true</c> the string will be a valid NQuad node.</param>
        </member>
        <member name="T:RomanticWeb.Entities.ConstantBaseUri">
            <summary>
            Implementation of <see cref="T:RomanticWeb.Entities.IBaseUriSelectionPolicy"/>,
            which always returns the same base <see cref="T:System.Uri"/> 
            </summary>
        </member>
        <member name="M:RomanticWeb.Entities.ConstantBaseUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ConstantBaseUri"/> class.
            </summary>
            <param name="defaultBaseUri">The default base URI.</param>
            <exception cref="T:System.ArgumentException">Base URI must be absolute;defaultBaseUri</exception>
        </member>
        <member name="P:RomanticWeb.Entities.ConstantBaseUri.BaseUri">
            <summary>
            Gets the base URI.
            </summary>
            <value>
            The base URI.
            </value>
        </member>
        <member name="M:RomanticWeb.Entities.ConstantBaseUri.SelectBaseUri(RomanticWeb.Entities.EntityId)">
            <summary>
            Selects the base URI.
            </summary>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="T:RomanticWeb.Entities.DefaultBlankNodeIdGenerator">
            <summary>
            Genreates ids in a sequence magi1, magi2, magi3, etc.
            </summary>
        </member>
        <member name="T:RomanticWeb.Entities.EntityIdExtensions">
            <summary>Provides useful extensions for entity identifiers.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityIdExtensions.MakeAbsolute``1(``0,System.Uri)">
            <summary>Makes an entity identifier absolute.</summary>
            <remarks>In case entity identifier is already absolute method checks if the current Uri has given base Uri. If this test fails exception of type <see cref="T:System.ArgumentException"/> is thrown.</remarks>
            <typeparam name="TEntityId">Type of the entity identifier.</typeparam>
            <param name="entityId">Relative or absolute entity identifier.</param>
            <param name="baseUri">Base Uri.</param>
            <returns>Entity id which is absolute.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.DynamicExtensions.ActLike``1(System.Object)">
            <summary>Dynamically casts a given <paramref name="instance" /> to an interface of type <typeparamref name="T" />.</summary>
            <typeparam name="T">Type of the interface to proxy.</typeparam>
            <param name="instance">Entity to be casted.</param>
            <returns>Entity of type <typeparamref name="T" />.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.DynamicExtensions.ActLike(System.Object,System.Type[])">
            <summary>Dynamically casts a given <paramref name="instance" /> to implement given <paramref name="types" />.</summary>
            <param name="instance">Entity to be casted.</param>
            <param name="types">Types to implement.</param>
            <returns>Entity of given <paramref name="types" />.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.DynamicExtensions.InvokeGet(System.Object,System.String)">
            <summary>Gets a value of a given property of a dynamic <paramref name="target" /> object.</summary>
            <param name="target">Target object .</param>
            <param name="propertyName">Property name to be get.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.DynamicExtensions.InvokeSet(System.Object,System.String,System.Object)">
            <summary>Sets a value of a given property of a dynamic <paramref name="target" /> object.</summary>
            <param name="target">Target object .</param>
            <param name="propertyName">Property name to be set.</param>
            <param name="value">Value to be set.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="T:RomanticWeb.Entities.Proxies.IProxy">
            <summary>Abstract of the proxy object.</summary>
        </member>
        <member name="P:RomanticWeb.Entities.Proxies.IProxy.WrappedObject">
            <summary>Gets the wrapped object.</summary>
        </member>
        <member name="T:RomanticWeb.Entities.Proxies.ProxyBase">
            <summary>Base class of the proxy object.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.ProxyBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.Proxies.ProxyBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer">
            <summary>Transforms the resulting nodes to a <see cref="T:RomanticWeb.Collections.RdfDictionary`4"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer.#ctor(RomanticWeb.Dynamic.IDictionaryTypeProvider)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer"/> class.</summary>
            <param name="typeProvider">The type provider.</param>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer.#ctor(RomanticWeb.Dynamic.EmitHelper)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer"/> class.</summary>
            <param name="emitHelper">The code emitting helper.</param>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer.FromNodes(RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext,System.Collections.Generic.IEnumerable{RomanticWeb.Model.INode})">
            <summary>Transforms the resulting nodes to a dictionary.</summary>
            <param name="parent">The parent entity.</param>
            <param name="property">The property.</param>
            <param name="context">The context.</param>
            <param name="nodes">ignored</param>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.DictionaryTransformer.ToNodes(System.Object,RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <summary>Not used.</summary>
        </member>
        <member name="T:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer">
            <summary>Basic <see cref="T:RomanticWeb.Entities.ResultPostprocessing.IResultTransformer"/> which only converts nodes using <see cref="T:RomanticWeb.Converters.INodeConverter"/> and aggregates the result a <see cref="T:RomanticWeb.Entities.ResultAggregations.IResultAggregator"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer.#ctor(RomanticWeb.Entities.ResultAggregations.IResultAggregator)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer"/> class.</summary>
            <param name="aggregator">The aggregator.</param>
        </member>
        <member name="P:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer.Aggregator">
            <summary>
            Gets the result aggregator.
            </summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer.FromNodes(RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext,System.Collections.Generic.IEnumerable{RomanticWeb.Model.INode})">
            <summary>Converts <paramref name="nodes"/> and returns the aggregated the result.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer.ToNodes(System.Object,RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <summary>Converts the given <paramref name="value"/> to <see cref="T:RomanticWeb.Model.Node"/>s.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.SimpleTransformer.Transform(RomanticWeb.Model.INode,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer">
            <summary>Transforms RDF object values to an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer"/> class.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer.FromNodes(RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext,System.Collections.Generic.IEnumerable{RomanticWeb.Model.INode})">
            <summary>Get an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing <paramref name="nodes"/>' values.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer.ToNodes(System.Object,RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <summary>Gets a node for each collection element.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.ObservableCollectionTransformer.Transform(RomanticWeb.Model.INode,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Entities.ResultPostprocessing.RdfListTransformer">
            <summary>Transforms the resulting nodes to an RDF:list adapter.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.RdfListTransformer.#ctor(RomanticWeb.Dynamic.EmitHelper)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.ResultPostprocessing.RdfListTransformer"/> class.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.RdfListTransformer.FromNodes(RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext,System.Collections.Generic.IEnumerable{RomanticWeb.Model.INode})">
            <summary>Transforms the resulting <paramref name="nodes"/> to a <see cref="T:RomanticWeb.Collections.IRdfListAdapter`1"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultPostprocessing.RdfListTransformer.ToNodes(System.Object,RomanticWeb.Entities.IEntityProxy,RomanticWeb.Mapping.Model.IPropertyMapping,RomanticWeb.IEntityContext)">
            <summary>Converts a list <paramref name="value"/> to an <see cref="T:RomanticWeb.Collections.IRdfListAdapter`1"/> if necessary and return the RDF:List's head.</summary>
            <returns>an <see cref="T:RomanticWeb.Entities.IEntity"/></returns>
            <exception cref="T:System.ArgumentException">Thrown when value is not a collection</exception>
        </member>
        <member name="T:RomanticWeb.Entities.ResultTransformerCatalog">
            <summary>
            Default implementation of <see cref="T:RomanticWeb.Entities.IResultTransformerCatalog"/>
            </summary>
        </member>
        <member name="M:RomanticWeb.Entities.ResultTransformerCatalog.GetAggregator(RomanticWeb.Entities.ResultAggregations.Aggregation)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.ResultTransformerCatalog.GetTransformer(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Entities.ITypedEntity">
            <summary>A typed entity, ie. one that exists in a rdf:type relation.</summary>
        </member>
        <member name="P:RomanticWeb.Entities.ITypedEntity.Types">
            <summary>Gets the entity's rdf classes.</summary>
        </member>
        <member name="T:RomanticWeb.Entities.CardinalityException">
            <summary>
            Represents error, which occurs when the number of results is unexpected
            </summary>
        </member>
        <member name="P:RomanticWeb.Entities.CardinalityException.ExpectedCardinality">
            <summary>
            Expected number of results
            </summary>
        </member>
        <member name="P:RomanticWeb.Entities.CardinalityException.ActualCardinality">
            <summary>
            Actual number of results returned
            </summary>
        </member>
        <member name="T:RomanticWeb.Entities.AmbiguousPropertyException">
            <summary>Represents an error, which occur when multiple properties are found for a predicate.</summary>
        </member>
        <member name="P:RomanticWeb.Entities.AmbiguousPropertyException.Message">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Entities.EntityExtensions">
            <summary>Provides useful extensions methods for entities.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.AsDynamic(RomanticWeb.Entities.IEntity)">
            <summary>Gets the entity as a dynamic object.</summary>
            <param name="entity">Target entity to be converted to dynamic.</param>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.AsEntity``1(RomanticWeb.Entities.IEntity)">
            <summary>Wraps the entity as a given statically typed type.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.GetTypes(RomanticWeb.Entities.IEntity)">
            <summary>Gets an enumeration containing all RDF types behind given entity.</summary>
            <param name="entity">Entity to operate on.</param>
            <returns>Returns an enumeration of RDF types for given entity.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Is(RomanticWeb.Entities.IEntity,System.Uri)">
            <summary>Determines if a given entity is of the given type provided.</summary>
            <param name="entity">Entity to operate on.</param>
            <param name="type">Types to check against.</param>
            <returns><b>true</b> if an entity is of any of the given types; othewise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Is(RomanticWeb.Entities.IEntity,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>Determines if a given entity is of any of the types provided.</summary>
            <param name="entity">Entity to operate on.</param>
            <param name="types">Enumeration of types to check against.</param>
            <returns><b>true</b> if an entity is of any of the given types; othewise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Is(RomanticWeb.Entities.IEntity,RomanticWeb.Entities.EntityId)">
            <summary>Determines if a given entity is of the given type provided.</summary>
            <param name="entity">Entity to operate on.</param>
            <param name="type">Types to check against.</param>
            <returns><b>true</b> if an entity is of any of the given types; othewise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Is(RomanticWeb.Entities.IEntity,System.Collections.Generic.IEnumerable{RomanticWeb.Entities.EntityId})">
            <summary>Determines if a given entity is of any of the types provided.</summary>
            <param name="entity">Entity to operate on.</param>
            <param name="types">Enumeration of types to check against.</param>
            <returns><b>true</b> if an entity is of any of the given types; othewise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Predicates(RomanticWeb.Entities.IEntity)">
            <summary>Gets an enumeration of all entity predicats that are currently set.</summary>
            <param name="entity">Entity for which predicates will be gathered.</param>
            <returns>Enumeration of predicate Uri's.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.Predicate(RomanticWeb.Entities.IEntity,System.Uri)">
            <summary>Gets the value of the given predicate.</summary>
            <param name="entity">Entity for which the value should be get.</param>
            <param name="predicate">Uri of the predicate the value should be get.</param>
            <remarks>This method returns strongly typed values as defined in the mappings.</remarks>
            <returns>Value of the given predicate or <b>null</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.ForceInitialize(RomanticWeb.Entities.IEntity)">
            <summary>Forces lazy initialization of <paramref name="entity"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityExtensions.CreateBlankId(RomanticWeb.Entities.IEntity)">
            <summary>Creates a blank identifier, which will be associated with this entity.</summary>
            <param name="entity">The root entity.</param>
        </member>
        <member name="T:RomanticWeb.Entities.EntityProxy">
            <summary>Proxy for exposing mapped entity members.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.#ctor(RomanticWeb.Entities.Entity,RomanticWeb.Mapping.Model.IEntityMapping,RomanticWeb.Entities.IResultTransformerCatalog,RomanticWeb.NamedGraphs.INamedGraphSelector,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Entities.EntityProxy" /> class.</summary>
            <param name="entity">The entity.</param>
            <param name="entityMapping">The entity mappings.</param>
            <param name="resultTransformers">The result transformers.</param>
            <param name="selector">The named graph selector.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="P:RomanticWeb.Entities.EntityProxy.Id">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Entities.EntityProxy.EntityMapping">
            <summary>Gets the entity mapping.</summary>
            <value>The entity mapping.</value>
        </member>
        <member name="P:RomanticWeb.Entities.EntityProxy.Context">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Entities.EntityProxy.GraphSelectionOverride">
            <summary>Gets the graph selection override.</summary>
            <value>The graph selection override.</value>
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.ToString">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.AsEntity``1">
            <summary>
            Gets the underlying wrapper as another type of entity.
            </summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.AsDynamic">
            <summary>
            Gets the underlying entity as dynamic.
            </summary>
        </member>
        <member name="M:RomanticWeb.Entities.EntityProxy.OverrideGraphSelection(RomanticWeb.NamedGraphs.ISourceGraphSelectionOverride)">
            <summary>
            Overrides the graph selection.
            </summary>
            <param name="parametersOverride">The parameters override.</param>
        </member>
        <member name="T:RomanticWeb.Entities.Entity">
            <summary>An RDF entity, which can be used to dynamically access RDF triples.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.#ctor(RomanticWeb.Entities.EntityId)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Entities.Entity"/>.</summary>
            <param name="entityId">IRI of the entity.</param>
            <remarks>It will not be backed by <b>any</b> triples, when not created via factory.</remarks>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.IEntityContext)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Entities.Entity"/> with given entity context.</summary>
            <param name="entityId">IRI of the entity.</param>
            <param name="context">Entity context to be attached to this entity.</param>
        </member>
        <member name="P:RomanticWeb.Entities.Entity.Id">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Entities.Entity.Context">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Entities.Entity.IsInitialized">
            <summary>Determines if the entity was initialized.</summary>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.op_Equality(RomanticWeb.Entities.Entity,RomanticWeb.Entities.IEntity)">
            <summary>Checks for equality between two entities.</summary>
            <param name="left">Left operand of the check.</param>
            <param name="right">Right operand of the check.</param>
            <returns><b>True</b> if entities has equal IRI's, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.op_Inequality(RomanticWeb.Entities.Entity,RomanticWeb.Entities.IEntity)">
            <summary>Checks for inequality between two entities.</summary>
            <param name="left">Left operand of the check.</param>
            <param name="right">Right operand of the check.</param>
            <returns><b>False</b> if entities has equal IRI's, otherwise <b>true</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.AsDynamic">
            <summary>Converts this entity as an dynamic object.</summary>
            <returns>Dynamic object beeing same entity.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>Tries to resolve a dynamic member.</summary>
            <param name="binder">Binder context with details on which member is going to be resolved.</param>
            <param name="result">Result of the member resolution.</param>
            <returns><b>True</b> if the member was resolved sucessfuly, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.AsEntity``1">
            <summary>Transforms given entity into a strongly typed interface.</summary>
            <typeparam name="TInterface">Strongly typed interface to be transformed into.</typeparam>
            <returns>Proxy beeing a dynamic implementation of a given interface.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj"></param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Entities.Entity.EnsureIsInitialized">
            <summary>Ensures the entity is initialized and filled with data.</summary>
        </member>
        <member name="T:RomanticWeb.IThreadSafeEntityStore">
            <summary>Represents an in-memory quad cache, which are organized in per-entity quads.</summary>
        </member>
        <member name="P:RomanticWeb.IThreadSafeEntityStore.ThreadSafe">
            <summary>Gets or sets a flag indicating whether the <see cref="T:RomanticWeb.IEntityStore" /> should work in thread-safe mode.</summary>
        </member>
        <member name="T:RomanticWeb.EntityContextFactory">
            <summary>An entrypoint to RomanticWeb, which encapsulates modularity and creation of <see cref="T:RomanticWeb.IEntityContext"/>.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.#ctor">
            <summary>Initializes a new instance of <see cref="T:RomanticWeb.EntityContextFactory"/> class.</summary>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.Ontologies">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.Mappings">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.Conventions">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.FallbackNodeConverter">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.MappingModelVisitors">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.TransformerCatalog">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.NamedGraphSelector">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContextFactory.ResourceResolutionStrategy">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.FromConfiguration(System.String)">
            <summary>Creates a factory defined in the configuration section.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.CreateContext">
            <summary>Creates a new instance of entity context.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithEntitySource``1">
            <summary>Includes a given <see cref="T:RomanticWeb.IEntitySource" /> in context that will be created.</summary>
            <returns>This <see cref="T:RomanticWeb.EntityContextFactory" /> </returns>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithOntology(RomanticWeb.Ontologies.IOntologyProvider)">
            <summary>Includes a given <see cref="T:RomanticWeb.Ontologies.IOntologyProvider" /> in context that will be created.</summary>
            <param name="ontologyProvider">Target ontology provider.</param>
            <returns>This <see cref="T:RomanticWeb.EntityContextFactory" /> </returns>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithMappings(System.Action{RomanticWeb.Mapping.MappingBuilder})">
            <summary>Exposes the method to register mapping repositories.</summary>
            <param name="buildMappings">Delegate method to be used for building mappings.</param>
            <returns>This <see cref="T:RomanticWeb.EntityContextFactory" /> </returns>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithBaseUri(System.Action{RomanticWeb.BaseUriSelectorBuilder})">
            <summary>Exposes a method to define how base <see cref="T:System.Uri"/>s are selected for relavitve <see cref="T:RomanticWeb.Entities.EntityId"/>s.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithNamedGraphSelector(RomanticWeb.NamedGraphs.INamedGraphSelector)">
            <summary>Exposes a method to define how the default graph name should be obtained.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithLoggingFacility(RomanticWeb.Diagnostics.ILogger)">
            <summary>Exposes a method to define a logging facility.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithResourceResolutionStrategy(RomanticWeb.LinkedData.IResourceResolutionStrategy)">
            <summary>Exposes a method to define how the default which resources should be considered external and be obtained.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithMetaGraphUri(System.Uri)">
            <summary>Sets the meta graph Uri.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.WithDependencies``1">
            <summary>Registers dependencies from a given <see cref="T:RomanticWeb.ComponentModel.CompositionRootBase"/> type.</summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactory.Dispose">
            <summary>Dispose this entity context factory and all components.</summary>
        </member>
        <member name="T:RomanticWeb.EntityContextFactoryExtensions">
            <summary>
            Helper methods for configuring <see cref="T:RomanticWeb.EntityContextFactory"/>
            </summary>
        </member>
        <member name="M:RomanticWeb.EntityContextFactoryExtensions.WithDefaultOntologies(RomanticWeb.EntityContextFactory)">
            <summary>Includes default <see cref="T:RomanticWeb.Ontologies.IOntologyProvider" />s in context that will be created.</summary>
            <returns>The <see cref="T:RomanticWeb.EntityContextFactory" /> </returns>
        </member>
        <member name="T:RomanticWeb.FluentCompare`1">
            <summary>
            Based on idea from http://www.make-awesome.com/2010/06/easier-complex-icomparable-implementations/
            </summary>
        </member>
        <member name="T:RomanticWeb.EntityContext">
            <summary>
            Creates a new instance of <see cref="T:RomanticWeb.EntityContext"/>
            </summary>
        </member>
        <member name="E:RomanticWeb.EntityContext.Disposed">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.Store">
            <summary>Gets the underlying in-memory store.</summary>
        </member>
        <member name="P:RomanticWeb.EntityContext.HasChanges">
            <summary>Gets a value indicating whether the underlying store has any changes.</summary>
        </member>
        <member name="P:RomanticWeb.EntityContext.BlankIdGenerator">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.Ontologies">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.Mappings">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.BaseUriSelector">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.FallbackNodeConverter">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.Cultures">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.EntityContext.TrackChanges">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.AsQueryable">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.AsQueryable``1">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.Load``1(RomanticWeb.Entities.EntityId)">
            <summary>Loads an entity from the underlying data source.</summary>
            <param name="entityId">IRI of the entity to be loaded.</param>
            <returns>Loaded entity.</returns>
        </member>
        <member name="M:RomanticWeb.EntityContext.Create``1(RomanticWeb.Entities.EntityId)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.Commit">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.Delete(RomanticWeb.Entities.EntityId)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.Delete(RomanticWeb.Entities.EntityId,RomanticWeb.DeleteBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.InitializeEnitity(RomanticWeb.Entities.IEntity)">
            <summary>Initializes given entity with data.</summary>
            <param name="entity">Entity to be initialized</param>
        </member>
        <member name="M:RomanticWeb.EntityContext.EntityAs``1(RomanticWeb.Entities.IEntity)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.EntityContext.Exists(RomanticWeb.Entities.EntityId)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.ICache">
            <summary>Serves as a base interface for caching data.</summary>
        </member>
        <member name="M:RomanticWeb.ICache.Contains(System.String)">
            <summary>Checks if a this cache contains a data under given key.</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RomanticWeb.ICache.Retrieve``1(System.String)">
            <summary>Retrieves data from given key.</summary>
            <typeparam name="T">Type of the resulting data.</typeparam>
            <param name="key">Key of data to be retrieved..</param>
            <returns>Data cached.</returns>
        </member>
        <member name="M:RomanticWeb.ICache.Store(System.String,System.Object)">
            <summary>Stores data under given key.</summary>
            <param name="key">Key to be stored at.</param>
            <param name="data">Data to be stored.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.GetInstanceDelegate">
            <summary>
            A delegate that represent the dynamic method compiled to resolved service instances.
            </summary>
            <param name="args">The arguments used by the dynamic method that this delegate represents.</param>
            <returns>A service instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IServiceRegistry">
            <summary>
            Defines a set of methods used to register services into the service container.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.IServiceRegistry.AvailableServices">
            <summary>
            Gets a list of <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instances that represents the
            registered services.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type,System.Type,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2(RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2(System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1(RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(System.Type,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``2(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``3(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``3(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``4(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``4(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``5(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``5(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{RomanticWeb.LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{RomanticWeb.LightInject.ServiceRequest,System.Object},RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Register(RomanticWeb.LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers composition roots from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{RomanticWeb.LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{RomanticWeb.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> to register from.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterPropertyDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.RegisterAssembly(System.String)">
            <summary>
            Registers composition roots from assemblies in the base directory that matches the <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern used to filter the assembly files.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Decorate(System.Type,System.Type,System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Decorate``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``0})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Decorate(RomanticWeb.LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:RomanticWeb.LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:RomanticWeb.LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Override(System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean},System.Func{RomanticWeb.LightInject.IServiceFactory,RomanticWeb.LightInject.ServiceRegistration,RomanticWeb.LightInject.ServiceRegistration})">
            <summary>
            Allows a registered service to be overridden by another <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/>.
            </summary>
            <param name="serviceSelector">A function delegate that is used to determine the service that should be
            overridden using the <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> returned from the <paramref name="serviceRegistrationFactory"/>.</param>
            <param name="serviceRegistrationFactory">The factory delegate used to create a <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> that overrides
            the incoming <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.Initialize(System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean},System.Action{RomanticWeb.LightInject.IServiceFactory,System.Object})">
            <summary>
            Allows post-processing of a service instance.
            </summary>
            <param name="predicate">A function delegate that determines if the given service can be post-processed.</param>
            <param name="processor">An action delegate that exposes the created service instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceRegistry.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
        </member>
        <member name="T:RomanticWeb.LightInject.IServiceFactory">
            <summary>
            Defines a set of methods used to retrieve service instances.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.BeginScope">
            <summary>
            Starts a new <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:RomanticWeb.LightInject.Scope"/></returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.EndCurrentScope">
            <summary>
            Ends the current <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``1">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``1(System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``2(``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``2(``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``3(``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``3(``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``4(``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.TryGetInstance``1">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.TryGetInstance``1(System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.GetAllInstances``1">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.Create``1">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <typeparam name="TService">The type of class for which to create an instance.</typeparam>
            <returns>An instance of <typeparamref name="TService"/>.</returns>
            <remarks>The concrete type will be registered if not already registered with the container.</remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceFactory.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IServiceContainer">
            <summary>
            Represents an inversion of control container.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.IServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:RomanticWeb.LightInject.ScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IServiceContainer.Clone">
            <summary>
            Creates a clone of the current <see cref="T:RomanticWeb.LightInject.IServiceContainer"/>.
            </summary>
            <returns>A new <see cref="T:RomanticWeb.LightInject.IServiceContainer"/> instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ILifetime">
            <summary>
            Represents a class that manages the lifetime of a service instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ILifetime.GetInstance(System.Func{System.Object},RomanticWeb.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:RomanticWeb.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ICompositionRoot">
            <summary>
            Represents a class that acts as a composition root for an <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ICompositionRoot.Compose(RomanticWeb.LightInject.IServiceRegistry)">
            <summary>
            Composes services by adding services to the <paramref name="serviceRegistry"/>.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/>.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.ITypeExtractor">
            <summary>
            Represents a class that extracts a set of types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ITypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ICompositionRootAttributeExtractor">
            <summary>
            Represents a class that is capable of extracting
            attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ICompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IPropertySelector">
            <summary>
            Represents a class that is responsible for selecting injectable properties.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IPropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of injectable properties.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IPropertyDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IPropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:RomanticWeb.LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IConstructorDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:RomanticWeb.LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IConstructionInfoBuilder">
            <summary>
            Represents a class that is capable of building a <see cref="T:System.Reflection.ConstructorInfo"/> instance
            based on a <see cref="T:RomanticWeb.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IConstructionInfoBuilder.Execute(RomanticWeb.LightInject.Registration)">
            <summary>
            Returns a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance based on the given <see cref="T:RomanticWeb.LightInject.Registration"/>.
            </summary>
            <param name="registration">The <see cref="T:RomanticWeb.LightInject.Registration"/> for which to return a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.</param>
            <returns>A <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance that describes how to create a service instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IConstructionInfoProvider">
            <summary>
            Represents a class that keeps track of a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance for each <see cref="T:RomanticWeb.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IConstructionInfoProvider.GetConstructionInfo(RomanticWeb.LightInject.Registration)">
            <summary>
            Gets a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:RomanticWeb.LightInject.Registration"/> for which to get a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:RomanticWeb.LightInject.IConstructionInfoProvider"/> and causes new <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instances
            to be created when the <see cref="M:RomanticWeb.LightInject.IConstructionInfoProvider.GetConstructionInfo(RomanticWeb.LightInject.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.ITypeConstructionInfoBuilder">
            <summary>
            Represents a class that builds a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ITypeConstructionInfoBuilder.Execute(RomanticWeb.LightInject.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:RomanticWeb.LightInject.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IConstructorSelector">
            <summary>
            Represents a class that selects the constructor to be used for creating a new service instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IAssemblyLoader">
            <summary>
            Represents a class that is responsible loading a set of assemblies based on the given search pattern.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IAssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IAssemblyScanner">
            <summary>
            Represents a class that is capable of scanning an assembly and register services into an <see cref="T:RomanticWeb.LightInject.IServiceContainer"/> instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,RomanticWeb.LightInject.IServiceRegistry,System.Func{RomanticWeb.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IAssemblyScanner.Scan(System.Reflection.Assembly,RomanticWeb.LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.ICompositionRootExecutor">
            <summary>
            Represents a class that is responsible for instantiating and executing an <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ICompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:RomanticWeb.LightInject.ICompositionRoot.Compose(RomanticWeb.LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.IEmitter">
            <summary>
            Represents an abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.IEmitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.IEmitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:RomanticWeb.LightInject.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.IEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IMethodSkeleton">
            <summary>
            Represents a dynamic method skeleton for emitting the code needed to resolve a service instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IMethodSkeleton.GetEmitter">
            <summary>
            Gets the <see cref="T:RomanticWeb.LightInject.IEmitter"/> for the this dynamic method.
            </summary>
            <returns>The <see cref="T:RomanticWeb.LightInject.IEmitter"/> for this dynamic method.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.IMethodSkeleton.CreateDelegate(System.Type)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.IScopeManagerProvider">
            <summary>
            Represents a class that is capable of providing the current <see cref="T:RomanticWeb.LightInject.ScopeManager"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.IScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.RuntimeArgumentsLoader">
            <summary>
            This class is not for public use and is used internally
            to load runtime arguments onto the evaluation stack.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.RuntimeArgumentsLoader.Load(System.Object[])">
            <summary>
            Loads the runtime arguments onto the evaluation stack.
            </summary>
            <param name="constants">A object array representing the dynamic method context.</param>
            <returns>An array containing the runtime arguments supplied when resolving the service.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.Ensure">
            <summary>
            Contains a set of helper method related to validating
            user input.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Ensure.IsNotNull``1(``0,System.String)">
            <summary>
            Ensures that the given <paramref name="value"/> is not null.
            </summary>
            <typeparam name="T">The type of value to be validated.</typeparam>
            <param name="value">The value to be validated.</param>
            <param name="paramName">The name of the parameter from which the <paramref name="value"/> comes from.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.ImmutableHashTableExtensions">
            <summary>
            Extends the <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/> class.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTableExtensions.Search``2(RomanticWeb.LightInject.ImmutableHashTable{``0,``1},``0)">
            <summary>
            Searches for a value using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/> instance.</param>
            <param name="key">The key for which to search for a value.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTableExtensions.Search``1(RomanticWeb.LightInject.ImmutableHashTable{System.Type,``0},System.Type)">
            <summary>
            Searches for a value using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/> instance.</param>
            <param name="key">The key for which to search for a value.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTableExtensions.Add``2(RomanticWeb.LightInject.ImmutableHashTable{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ImmutableHashTreeExtensions">
            <summary>
            Extends the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> class.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTreeExtensions.Search``2(RomanticWeb.LightInject.ImmutableHashTree{``0,``1},``0)">
            <summary>
            Searches for a <typeparamref name="TValue"/> using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.</param>
            <param name="key">The key of the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> to get.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTreeExtensions.Add``2(RomanticWeb.LightInject.ImmutableHashTree{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTreeExtensions.InOrder``2(RomanticWeb.LightInject.ImmutableHashTree{``0,``1})">
            <summary>
            Returns the nodes in the tree using in order traversal.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTree">The target <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.</param>
            <returns>The nodes using in order traversal.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.EmitterExtensions">
            <summary>
            Extends the <see cref="T:RomanticWeb.LightInject.IEmitter"/> interface with a set of methods
            that optimizes and simplifies emitting MSIL instructions.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.UnboxOrCast(RomanticWeb.LightInject.IEmitter,System.Type)">
            <summary>
            Performs a cast or unbox operation if the current <see cref="P:RomanticWeb.LightInject.IEmitter.StackType"/> is
            different from the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushConstant(RomanticWeb.LightInject.IEmitter,System.Int32,System.Type)">
            <summary>
            Pushes a constant value onto the evaluation stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushConstant(RomanticWeb.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes a constant value onto the evaluation stack as a object reference.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushArrayElement(RomanticWeb.LightInject.IEmitter)">
            <summary>
            Pushes the element containing an object reference at a specified index onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushArguments(RomanticWeb.LightInject.IEmitter,System.Reflection.ParameterInfo[])">
            <summary>
            Pushes the arguments associated with a service request onto the stack.
            The arguments are found as an array in the last element of the constants array
            that is passed into the dynamic method.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="parameters">A list of <see cref="T:System.Reflection.ParameterInfo"/> instances that
            represent the arguments to be pushed onto the stack.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Call(RomanticWeb.LightInject.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> that represents the method to be called.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.New(RomanticWeb.LightInject.IEmitter,System.Reflection.ConstructorInfo)">
            <summary>
            Pushes a new instance onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="constructorInfo">The <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> that represent the object to be created.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Push(RomanticWeb.LightInject.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pushes the given <paramref name="localBuilder"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> to be pushed onto the stack.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushArgument(RomanticWeb.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes an argument with the given <paramref name="index"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="index">The index of the argument to be pushed onto the stack.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Store(RomanticWeb.LightInject.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Stores the value currently on top of the stack in the given <paramref name="localBuilder"/>.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> for which the value is to be stored.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.PushNewArray(RomanticWeb.LightInject.IEmitter,System.Type)">
            <summary>
            Pushes a new array of the given <paramref name="elementType"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="elementType">The element <see cref="T:System.Type"/> of the new array.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Push(RomanticWeb.LightInject.IEmitter,System.Int32)">
            <summary>
            Pushes an <see cref="T:System.Int32"/> value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="value">The <see cref="T:System.Int32"/> value to be pushed onto the stack.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Cast(RomanticWeb.LightInject.IEmitter,System.Type)">
            <summary>
            Performs a cast of the value currently on top of the stack to the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the value will be casted into.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.EmitterExtensions.Return(RomanticWeb.LightInject.IEmitter)">
            <summary>
            Returns from the current method.
            </summary>
            <param name="emitter">The target <see cref="T:RomanticWeb.LightInject.IEmitter"/>.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.ContainerOptions">
            <summary>
            Represents a set of configurable options when creating a new instance of the container.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ContainerOptions.Default">
            <summary>
            Gets the default <see cref="T:RomanticWeb.LightInject.ContainerOptions"/> used across all <see cref="T:RomanticWeb.LightInject.ServiceContainer"/> instances.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ContainerOptions.EnableVariance">
            <summary>
            Gets or sets a value indicating whether variance is applied when resolving an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:RomanticWeb.LightInject.ServiceContainer">
            <summary>
            An ultra lightweight service container.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.#ctor(RomanticWeb.LightInject.ContainerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ServiceContainer"/> class.
            </summary>
            <param name="options">The <see cref="T:RomanticWeb.LightInject.ContainerOptions"/> instances that represents the configurable options.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:RomanticWeb.LightInject.ScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.PropertyDependencySelector">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IPropertyDependencySelector"/> instance that
            is responsible for selecting the property dependencies for a given type.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.CompositionRootTypeExtractor">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.ITypeExtractor"/> that is responsible
            for extracting composition roots types from an assembly.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.CompositionRootExecutor">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.ICompositionRootExecutor"/> that is responsible
            for executing composition roots.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.ConstructorDependencySelector">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IConstructorDependencySelector"/> instance that
            is responsible for selecting the constructor dependencies for a given constructor.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.ConstructorSelector">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IConstructorSelector"/> instance that is responsible
            for selecting the constructor to be used when creating new service instances.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.AssemblyScanner">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IAssemblyScanner"/> instance that is responsible for scanning assemblies.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.AssemblyLoader">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.IAssemblyLoader"/> instance that is responsible for loading assemblies during assembly scanning.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceContainer.AvailableServices">
            <summary>
            Gets a list of <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instances that represents the registered services.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.BeginScope">
            <summary>
            Starts a new <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
            <returns><see cref="T:RomanticWeb.LightInject.Scope"/></returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.EndCurrentScope">
            <summary>
            Ends the current <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{RomanticWeb.LightInject.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{RomanticWeb.LightInject.ServiceRequest,System.Object},RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(RomanticWeb.LightInject.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> instance that contains service metadata.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers composition roots from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{RomanticWeb.LightInject.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{RomanticWeb.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> to register from.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterConstructorDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterConstructorDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterPropertyDependency``1(System.Func{RomanticWeb.LightInject.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterAssembly(System.String)">
            <summary>
            Registers composition roots from assemblies in the base directory that matches the <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern used to filter the assembly files.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Decorate(System.Type,System.Type,System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Decorate``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``0})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Decorate(RomanticWeb.LightInject.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:RomanticWeb.LightInject.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:RomanticWeb.LightInject.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Override(System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean},System.Func{RomanticWeb.LightInject.IServiceFactory,RomanticWeb.LightInject.ServiceRegistration,RomanticWeb.LightInject.ServiceRegistration})">
            <summary>
            Allows a registered service to be overridden by another <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/>.
            </summary>
            <param name="serviceSelector">A function delegate that is used to determine the service that should be
            overridden using the <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> returned from the <paramref name="serviceRegistrationFactory"/>.</param>
            <param name="serviceRegistrationFactory">The factory delegate used to create a <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> that overrides
            the incoming <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Initialize(System.Func{RomanticWeb.LightInject.ServiceRegistration,System.Boolean},System.Action{RomanticWeb.LightInject.IServiceFactory,System.Object})">
            <summary>
            Allows post-processing of a service instance.
            </summary>
            <param name="predicate">A function delegate that determines if the given service can be post-processed.</param>
            <param name="processor">An action delegate that exposes the created service instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type,System.Type,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type,System.Type,System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2(RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2(System.String,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type,RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1(RomanticWeb.LightInject.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``1(System.Func{RomanticWeb.LightInject.IServiceFactory,``0})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``2(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``3(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``3(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``4(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``4(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``5(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register``5(System.Func{RomanticWeb.LightInject.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``1">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``1(System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``2(``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``2(``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``3(``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``3(``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``4(``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.TryGetInstance``1">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.TryGetInstance``1(System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.GetAllInstances``1">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Create``1">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <typeparam name="TService">The type of class for which to create an instance.</typeparam>
            <returns>An instance of <typeparamref name="TService"/>.</returns>
            <remarks>The concrete type will be registered if not already registered with the container.</remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Dispose">
            <summary>
            Disposes any services registered using the <see cref="T:RomanticWeb.LightInject.PerContainerLifetime"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Clone">
            <summary>
            Creates a clone of the current <see cref="T:RomanticWeb.LightInject.IServiceContainer"/>.
            </summary>
            <returns>A new <see cref="T:RomanticWeb.LightInject.IServiceContainer"/> instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceContainer.Invalidate">
            <summary>
            Invalidates the container and causes the compiler to "recompile".
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.PerThreadScopeManagerProvider">
            <summary>
            A <see cref="T:RomanticWeb.LightInject.IScopeManagerProvider"/> that provides a <see cref="T:RomanticWeb.LightInject.ScopeManager"/> per thread.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PerThreadScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.PerLogicalCallContextScopeManagerProvider">
            <summary>
            A <see cref="T:RomanticWeb.LightInject.IScopeManagerProvider"/> that provides a <see cref="T:RomanticWeb.LightInject.ScopeManager"/> across
            async points.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PerLogicalCallContextScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:RomanticWeb.LightInject.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ThreadSafeDictionary`2">
            <summary>
            A thread safe dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ThreadSafeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ThreadSafeDictionary`2"/> class using the
            given <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys</param>
        </member>
        <member name="T:RomanticWeb.LightInject.MostResolvableConstructorSelector">
            <summary>
            Selects the <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> from a given type that represents the most resolvable constructor.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.MostResolvableConstructorSelector.#ctor(System.Func{System.Type,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.MostResolvableConstructorSelector"/> class.
            </summary>
            <param name="canGetInstance">A function delegate that determines if a service type can be resolved.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.MostResolvableConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.MostResolvableConstructorSelector.GetServiceName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service name based on the given <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which to get the service name.</param>
            <returns>The name of the service for the given <paramref name="parameter"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ConstructorDependencySelector">
            <summary>
            Selects the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:RomanticWeb.LightInject.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.PropertyDependencySelector">
            <summary>
            Selects the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PropertyDependencySelector.#ctor(RomanticWeb.LightInject.IPropertySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.PropertyDependencySelector"/> class.
            </summary>
            <param name="propertySelector">The <see cref="T:RomanticWeb.LightInject.IPropertySelector"/> that is
            responsible for selecting a list of injectable properties.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.PropertyDependencySelector.PropertySelector">
            <summary>
            Gets the <see cref="T:RomanticWeb.LightInject.IPropertySelector"/> that is responsible for selecting a
            list of injectable properties.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:RomanticWeb.LightInject.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.TypeConstructionInfoBuilder">
            <summary>
            Builds a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeConstructionInfoBuilder.#ctor(RomanticWeb.LightInject.IConstructorSelector,RomanticWeb.LightInject.IConstructorDependencySelector,RomanticWeb.LightInject.IPropertyDependencySelector,System.Func{System.Type,System.String,System.Delegate},System.Func{System.Type,System.String,System.Delegate})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.TypeConstructionInfoBuilder"/> class.
            </summary>
            <param name="constructorSelector">The <see cref="T:RomanticWeb.LightInject.IConstructorSelector"/> that is responsible
            for selecting the constructor to be used for constructor injection.</param>
            <param name="constructorDependencySelector">The <see cref="T:RomanticWeb.LightInject.IConstructorDependencySelector"/> that is
            responsible for selecting the constructor dependencies for a given <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/>.</param>
            <param name="propertyDependencySelector">The <see cref="T:RomanticWeb.LightInject.IPropertyDependencySelector"/> that is responsible
            for selecting the property dependencies for a given <see cref="T:System.Type"/>.</param>
            <param name="getConstructorDependencyExpression">A function delegate that returns the registered constructor dependency expression, if any.</param>
            <param name="getPropertyDependencyExpression">A function delegate that returns the registered property dependency expression, if any.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeConstructionInfoBuilder.Execute(RomanticWeb.LightInject.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:RomanticWeb.LightInject.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ConstructionInfoProvider">
            <summary>
            Keeps track of a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance for each <see cref="T:RomanticWeb.LightInject.Registration"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructionInfoProvider.#ctor(RomanticWeb.LightInject.IConstructionInfoBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ConstructionInfoProvider"/> class.
            </summary>
            <param name="constructionInfoBuilder">The <see cref="T:RomanticWeb.LightInject.IConstructionInfoBuilder"/> that
            is responsible for building a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance based on a given <see cref="T:RomanticWeb.LightInject.Registration"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructionInfoProvider.GetConstructionInfo(RomanticWeb.LightInject.Registration)">
            <summary>
            Gets a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:RomanticWeb.LightInject.Registration"/> for which to get a <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:RomanticWeb.LightInject.IConstructionInfoProvider"/> and causes new <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> instances
            to be created when the <see cref="M:RomanticWeb.LightInject.IConstructionInfoProvider.GetConstructionInfo(RomanticWeb.LightInject.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.ServiceRequest">
            <summary>
            Contains information about a service request that originates from a rule based service registration.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceRequest.#ctor(System.Type,System.String,RomanticWeb.LightInject.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ServiceRequest"/> class.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceFactory">The <see cref="T:RomanticWeb.LightInject.IServiceFactory"/> to be associated with this <see cref="T:RomanticWeb.LightInject.ServiceRequest"/>.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRequest.ServiceType">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRequest.ServiceName">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRequest.ServiceFactory">
            <summary>
            Gets the <see cref="T:RomanticWeb.LightInject.IServiceFactory"/> that is associated with this <see cref="T:RomanticWeb.LightInject.ServiceRequest"/>.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.Registration">
            <summary>
            Base class for concrete registrations within the service container.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Registration.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Registration.ImplementingType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the <see cref="P:RomanticWeb.LightInject.Registration.ServiceType"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Registration.FactoryExpression">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Expressions.LambdaExpression"/> used to create a service instance.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.DecoratorRegistration">
            <summary>
            Contains information about a registered decorator.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.DecoratorRegistration.CanDecorate">
            <summary>
            Gets or sets a function delegate that determines if the decorator can decorate the service
            represented by the supplied <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.DecoratorRegistration.ImplementingTypeFactory">
            <summary>
            Gets or sets a <see cref="T:System.Lazy`1"/> that defers resolving of the decorators implementing type.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.DecoratorRegistration.Index">
            <summary>
            Gets or sets the index of this <see cref="T:RomanticWeb.LightInject.DecoratorRegistration"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.DecoratorRegistration.HasDeferredImplementingType">
            <summary>
            Gets a value indicating whether this registration has a deferred implementing type.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.ServiceRegistration">
            <summary>
            Contains information about a registered service.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRegistration.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRegistration.Lifetime">
            <summary>
            Gets or sets the <see cref="T:RomanticWeb.LightInject.ILifetime"/> instance that controls the lifetime of the service.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRegistration.Value">
            <summary>
            Gets or sets the value that represents the instance of the service.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ServiceRegistration.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RomanticWeb.LightInject.ServiceRegistration"/> can be overridden
            by another registration.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceRegistration.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:RomanticWeb.LightInject.ServiceRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:RomanticWeb.LightInject.ConstructionInfo">
            <summary>
            Contains information about how to create a service instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ConstructionInfo"/> class.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructionInfo.ImplementingType">
            <summary>
            Gets or sets the implementing type that represents the concrete class to create.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructionInfo.Constructor">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ConstructorInfo"/> that is used to create a service instance.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructionInfo.PropertyDependencies">
            <summary>
            Gets a list of <see cref="T:RomanticWeb.LightInject.PropertyDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructionInfo.ConstructorDependencies">
            <summary>
            Gets a list of <see cref="T:RomanticWeb.LightInject.ConstructorDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructionInfo.FactoryDelegate">
            <summary>
            Gets or sets the function delegate to be used to create the service instance.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.Dependency">
            <summary>
            Represents a class dependency.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Dependency.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/> of the <see cref="T:RomanticWeb.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Dependency.ServiceName">
            <summary>
            Gets or sets the service name of the <see cref="T:RomanticWeb.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Dependency.FactoryExpression">
            <summary>
            Gets or sets the <see cref="P:RomanticWeb.LightInject.Dependency.FactoryExpression"/> that represent getting the value of the <see cref="T:RomanticWeb.LightInject.Dependency"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Dependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Dependency.IsRequired">
            <summary>
            Gets or sets a value indicating whether this dependency is required.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Dependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.PropertyDependency">
            <summary>
            Represents a property dependency.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.PropertyDependency.Property">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo"/> that is used to set the property value.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.PropertyDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PropertyDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ConstructorDependency">
            <summary>
            Represents a constructor dependency.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructorDependency.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ParameterInfo"/> for this <see cref="T:RomanticWeb.LightInject.ConstructorDependency"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructorDependency.IsDecoratorTarget">
            <summary>
            Gets or sets a value indicating whether that this parameter represents
            the decoration target passed into a decorator instance.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ConstructorDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ConstructorDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.PerContainerLifetime">
            <summary>
            Ensures that only one instance of a given service can exist within the current <see cref="T:RomanticWeb.LightInject.IServiceContainer"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PerContainerLifetime.GetInstance(System.Func{System.Object},RomanticWeb.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:RomanticWeb.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.PerContainerLifetime.Dispose">
            <summary>
            Disposes the service instances managed by this <see cref="T:RomanticWeb.LightInject.PerContainerLifetime"/> instance.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.PerRequestLifeTime">
            <summary>
            Ensures that a new instance is created for each request in addition to tracking disposable instances.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PerRequestLifeTime.GetInstance(System.Func{System.Object},RomanticWeb.LightInject.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:RomanticWeb.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.PerScopeLifetime">
            <summary>
            Ensures that only one service instance can exist within a given <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
            <remarks>
            If the service instance implements <see cref="T:System.IDisposable"/>,
            it will be disposed when the <see cref="T:RomanticWeb.LightInject.Scope"/> ends.
            </remarks>
        </member>
        <member name="M:RomanticWeb.LightInject.PerScopeLifetime.GetInstance(System.Func{System.Object},RomanticWeb.LightInject.Scope)">
            <summary>
            Returns the same service instance within the current <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:RomanticWeb.LightInject.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ScopeManager">
            <summary>
            Manages a set of <see cref="T:RomanticWeb.LightInject.Scope"/> instances.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.ScopeManager.CurrentScope">
            <summary>
            Gets the current <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ScopeManager.BeginScope">
            <summary>
            Starts a new <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
            <returns>A new <see cref="T:RomanticWeb.LightInject.Scope"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.ScopeManager.EndScope(RomanticWeb.LightInject.Scope)">
            <summary>
            Ends the given <paramref name="scope"/> and updates the <see cref="P:RomanticWeb.LightInject.ScopeManager.CurrentScope"/> property.
            </summary>
            <param name="scope">The scope that is completed.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.Scope">
            <summary>
            Represents a scope.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Scope.#ctor(RomanticWeb.LightInject.ScopeManager,RomanticWeb.LightInject.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.Scope"/> class.
            </summary>
            <param name="scopeManager">The <see cref="F:RomanticWeb.LightInject.Scope.scopeManager"/> that manages this <see cref="T:RomanticWeb.LightInject.Scope"/>.</param>
            <param name="parentScope">The parent <see cref="T:RomanticWeb.LightInject.Scope"/>.</param>
        </member>
        <member name="E:RomanticWeb.LightInject.Scope.Completed">
            <summary>
            Raised when the <see cref="T:RomanticWeb.LightInject.Scope"/> is completed.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Scope.ParentScope">
            <summary>
            Gets the parent <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Scope.ChildScope">
            <summary>
            Gets the child <see cref="T:RomanticWeb.LightInject.Scope"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Scope.TrackInstance(System.IDisposable)">
            <summary>
            Registers the <paramref name="disposable"/> so that it is disposed when the scope is completed.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to register.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Scope.Dispose">
            <summary>
            Disposes all instances tracked by this scope.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.CompositionRootTypeAttribute">
            <summary>
            Used at the assembly level to describe the composition root(s) for the target assembly.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> class.
            </summary>
            <param name="compositionRootType">A <see cref="T:System.Type"/> that implements the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.CompositionRootTypeAttribute.CompositionRootType">
            <summary>
            Gets the <see cref="T:System.Type"/> that implements the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> interface.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.CompositionRootAttributeExtractor">
            <summary>
            A class that is capable of extracting attributes of type
            <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:RomanticWeb.LightInject.CompositionRootTypeExtractor">
            <summary>
            Extracts concrete <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> implementations from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootTypeExtractor.#ctor(RomanticWeb.LightInject.ICompositionRootAttributeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.CompositionRootTypeExtractor"/> class.
            </summary>
            <param name="compositionRootAttributeExtractor">The <see cref="T:RomanticWeb.LightInject.ICompositionRootAttributeExtractor"/>
            that is responsible for extracting attributes of type <see cref="T:RomanticWeb.LightInject.CompositionRootTypeAttribute"/> from
            a given <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.CachedTypeExtractor">
            <summary>
            A <see cref="T:RomanticWeb.LightInject.ITypeExtractor"/> cache decorator.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.CachedTypeExtractor.#ctor(RomanticWeb.LightInject.ITypeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.CachedTypeExtractor"/> class.
            </summary>
            <param name="typeExtractor">The target <see cref="T:RomanticWeb.LightInject.ITypeExtractor"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.CachedTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ConcreteTypeExtractor">
            <summary>
            Extracts concrete types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ConcreteTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.CompositionRootExecutor">
            <summary>
            A class that is responsible for instantiating and executing an <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootExecutor.#ctor(RomanticWeb.LightInject.IServiceRegistry,System.Func{System.Type,RomanticWeb.LightInject.ICompositionRoot})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.CompositionRootExecutor"/> class.
            </summary>
            <param name="serviceRegistry">The <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> to be configured by the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/>.</param>
            <param name="activator">The function delegate that is responsible for creating an instance of the <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.CompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:RomanticWeb.LightInject.ICompositionRoot.Compose(RomanticWeb.LightInject.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.AssemblyScanner">
            <summary>
            An assembly scanner that registers services based on the types contained within an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.AssemblyScanner.#ctor(RomanticWeb.LightInject.ITypeExtractor,RomanticWeb.LightInject.ITypeExtractor,RomanticWeb.LightInject.ICompositionRootExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.AssemblyScanner"/> class.
            </summary>
            <param name="concreteTypeExtractor">The <see cref="T:RomanticWeb.LightInject.ITypeExtractor"/> that is responsible for
            extracting concrete types from the assembly being scanned.</param>
            <param name="compositionRootTypeExtractor">The <see cref="T:RomanticWeb.LightInject.ITypeExtractor"/> that is responsible for
            extracting <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/> implementations from the assembly being scanned.</param>
            <param name="compositionRootExecutor">The <see cref="T:RomanticWeb.LightInject.ICompositionRootExecutor"/> that is
            responsible for creating and executing an <see cref="T:RomanticWeb.LightInject.ICompositionRoot"/>.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,RomanticWeb.LightInject.IServiceRegistry,System.Func{RomanticWeb.LightInject.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> instance.</param>
            <param name="lifetimeFactory">The <see cref="T:RomanticWeb.LightInject.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.AssemblyScanner.Scan(System.Reflection.Assembly,RomanticWeb.LightInject.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:RomanticWeb.LightInject.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.PropertySelector">
            <summary>
            Selects the properties that represents a dependency to the target <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.PropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of properties that represents a dependency to the target <paramref name="type"/></returns>
        </member>
        <member name="M:RomanticWeb.LightInject.PropertySelector.IsInjectable(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the <paramref name="propertyInfo"/> represents an injectable property.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> that describes the target property.</param>
            <returns><b>true</b> if the property is injectable, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.AssemblyLoader">
            <summary>
            Loads all assemblies from the application base directory that matches the given search pattern.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.AssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.AssemblyLoader.CanLoad(System.String)">
            <summary>
            Indicates if the current <paramref name="fileName"/> represent a file that can be loaded.
            </summary>
            <param name="fileName">The name of the target file.</param>
            <returns><b>true</b> if the file can be loaded, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.KeyValue`2">
            <summary>
            Defines an immutable representation of a key and a value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:RomanticWeb.LightInject.KeyValue`2.Key">
            <summary>
            The key of this <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.KeyValue`2.Value">
            <summary>
            The key of this <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.KeyValue`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> class.
            </summary>
            <param name="key">The key of this <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> instance.</param>
            <param name="value">The value of this <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> instance.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.ImmutableList`1">
            <summary>
            Represents a simple "add only" immutable list.
            </summary>
            <typeparam name="T">The type of items contained in the list.</typeparam>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableList`1.Empty">
            <summary>
            Represents an empty <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableList`1.Items">
            <summary>
            An array that contains the items in the <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableList`1.Count">
            <summary>
            The number of items in the <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableList`1.#ctor(RomanticWeb.LightInject.ImmutableList{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/> class.
            </summary>
            <param name="previousList">The list from which the previous items are copied.</param>
            <param name="value">The value to be added to the list.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableList`1.Add(`0)">
            <summary>
            Creates a new <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/> that contains the new <paramref name="value"/>.
            </summary>
            <param name="value">The value to be added to the new list.</param>
            <returns>A new <see cref="T:RomanticWeb.LightInject.ImmutableList`1"/> that contains the new <paramref name="value"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.ImmutableHashTable`2">
            <summary>
            A simple immutable add-only hash table.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTable`2.Empty">
            <summary>
            An empty <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTable`2.Count">
            <summary>
            Gets the number of items stored in the hash table.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTable`2.Buckets">
            <summary>
            Gets the hast table buckets.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTable`2.Divisor">
            <summary>
            Gets the divisor used to calculate the bucket index from the hash code of the key.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTable`2.#ctor(RomanticWeb.LightInject.ImmutableHashTable{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/> class.
            </summary>
            <param name="previous">The "previous" hash table that contains already existing values.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTable`2.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:RomanticWeb.LightInject.ImmutableHashTable`2"/> class from being created.
            </summary>
        </member>
        <member name="T:RomanticWeb.LightInject.ImmutableHashTree`2">
            <summary>
            A balanced binary search tree implemented as an AVL tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Empty">
            <summary>
            An empty <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Key">
            <summary>
            The key of this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Value">
            <summary>
            The value of this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Duplicates">
            <summary>
            The list of <see cref="T:RomanticWeb.LightInject.KeyValue`2"/> instances where the
            <see cref="F:RomanticWeb.LightInject.KeyValue`2.Key"/> has the same hash code as this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.HashCode">
            <summary>
            The hash code retrieved from the <see cref="F:RomanticWeb.LightInject.ImmutableHashTree`2.Key"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Left">
            <summary>
            The left node of this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Right">
            <summary>
            The right node of this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.Height">
            <summary>
            The height of this node.
            </summary>
            <remarks>
            An empty node has a height of 0 and a node without children has a height of 1.
            </remarks>
        </member>
        <member name="F:RomanticWeb.LightInject.ImmutableHashTree`2.IsEmpty">
            <summary>
            Indicates that this <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> is empty.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTree`2.#ctor(`0,`1,RomanticWeb.LightInject.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> class
            and adds a new entry in the <see cref="F:RomanticWeb.LightInject.ImmutableHashTree`2.Duplicates"/> list.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="hashTree">The <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> that contains existing duplicates.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.ImmutableHashTree`2.#ctor(`0,`1,RomanticWeb.LightInject.ImmutableHashTree{`0,`1},RomanticWeb.LightInject.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.ImmutableHashTree`2"/> class.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="left">The left node.</param>
            <param name="right">The right node.</param>
        </member>
        <member name="T:RomanticWeb.LightInject.Instruction">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Instruction.#ctor(System.Reflection.Emit.OpCode,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.Instruction"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:RomanticWeb.LightInject.Instruction"/> is emitted.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.Instruction.Code">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Instruction.Emit">
            <summary>
            Gets the action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:RomanticWeb.LightInject.Instruction"/> is emitted.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Instruction.ToString">
            <summary>
            Returns the string representation of an <see cref="T:RomanticWeb.LightInject.Instruction"/>.
            </summary>
            <returns>The string representation of an <see cref="T:RomanticWeb.LightInject.Instruction"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.Instruction`1">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
            <typeparam name="T">The type of argument used in this instruction.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.Instruction`1.#ctor(System.Reflection.Emit.OpCode,`0,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.Instruction`1"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="argument">The argument be passed along with the given <paramref name="code"/>.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:RomanticWeb.LightInject.Instruction"/> is emitted.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.Instruction`1.Argument">
            <summary>
            Gets the argument be passed along with the given <see cref="P:RomanticWeb.LightInject.Instruction.Code"/>.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Instruction`1.ToString">
            <summary>
            Returns the string representation of an <see cref="T:RomanticWeb.LightInject.Instruction`1"/>.
            </summary>
            <returns>The string representation of an <see cref="T:RomanticWeb.LightInject.Instruction`1"/>.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.Emitter">
            <summary>
            An abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.#ctor(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.Emitter"/> class.
            </summary>
            <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit MSIL instructions.</param>
            <param name="parameterTypes">The list of parameter types used by the current dynamic method.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.Emitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:RomanticWeb.LightInject.Emitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:RomanticWeb.LightInject.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:RomanticWeb.LightInject.Emitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:RomanticWeb.LightInject.LogicalThreadStorage`1">
            <summary>
            Provides storage per logical thread of execution.
            </summary>
            <typeparam name="T">The type of the value contained in this <see cref="T:RomanticWeb.LightInject.LogicalThreadStorage`1"/>.</typeparam>
        </member>
        <member name="M:RomanticWeb.LightInject.LogicalThreadStorage`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.LightInject.LogicalThreadStorage`1"/> class.
            </summary>
            <param name="valueFactory">The value factory used to create an instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="P:RomanticWeb.LightInject.LogicalThreadStorage`1.Value">
            <summary>
            Gets the value for the current logical thread of execution.
            </summary>
            <value>
            The value for the current logical thread of execution.
            </value>
        </member>
        <member name="T:RomanticWeb.LightInject.TypeHelper">
            <summary>
            Contains a set of extension method that represents
            a compability layer for reflection methods.
            </summary>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetMethodInfo(System.Delegate)">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            <param name="del">The target <see cref="T:System.Delegate"/>.</param>
            <returns>The method represented by the delegate.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetPrivateMethod(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> that represents a private method on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="name">The name of the private method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> that represents a private method on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetPrivateStaticMethod(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> that represents a private static method on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="name">The name of the private method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> that represents a private static method on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetPrivateStaticMethods(System.Type)">
            <summary>
            Gets an array of <see cref="T:System.Reflection.MethodInfo"/> objects that represents private static methods on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects that represents private static methods on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets the custom attributes for this <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The target <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="attributeType">The type of <see cref="T:System.Attribute"/> objects to return.</param>
            <returns>The custom attributes for this <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsEnumerableOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsReadOnlyCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsReadOnlyListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsLazy(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsFunc(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsFuncWithParameters(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>,
            <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>, <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.IsClosedGeneric(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is a closed generic type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is a closed generic type; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.LightInject.TypeHelper.GetElementType(System.Type)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer, or reference type,
            or null if the current Type is not an array or a pointer, or is not passed by reference,
            or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.CamelCaseVariableNamingConvention">
            <summary>Creates camelCase variable names.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.CamelCaseVariableNamingConvention.GetIdentifierForName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Linq.Expressions.EntityIdentifierExpression">
            <summary>Provides basic details about entity identifier access.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.#ctor(System.Linq.Expressions.MemberExpression,Remotion.Linq.Clauses.FromClauseBase)">
            <summary>Default constructor with base <see cref="T:System.Linq.Expressions.MemberExpression" /> and <see cref="T:Remotion.Linq.Clauses.FromClauseBase" />.</summary>
            <param name="expression">Base member expression.</param>
            <param name="target">Target of the invocation.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.Expression">
            <summary>Base member expression.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.EntityProperty">
            <summary>EntityProperty accessed.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.CanReduce">
            <summary>Determines if the expression can be reduced.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.NodeType">
            <summary>Gets the node type.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.Type">
            <summary>Gets the type returned by given member.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityIdentifierExpression.Target">
            <summary>Gets the target of the invocation.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Expressions.EntityPropertyExpression">
            <summary>Provides basic details about entity member access.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Expressions.EntityPropertyExpression.#ctor(System.Linq.Expressions.MemberExpression,RomanticWeb.Mapping.Model.IPropertyMapping,Remotion.Linq.Clauses.FromClauseBase)">
            <summary>Default constructor with base <see cref="T:System.Linq.Expressions.MemberExpression" />, <see cref="T:RomanticWeb.Mapping.Model.IPropertyMapping" /> and <see cref="T:Remotion.Linq.Clauses.FromClauseBase" />.</summary>
            <param name="expression">Base member expression.</param>
            <param name="propertyMapping">Ontology property mapping.</param>
            <param name="target">Target of the invocation.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Expressions.EntityPropertyExpression.#ctor(System.Linq.Expressions.MemberExpression,RomanticWeb.Mapping.Model.IPropertyMapping,Remotion.Linq.Clauses.FromClauseBase,System.String)">
            <summary>Default constructor with base <see cref="T:System.Linq.Expressions.MemberExpression" />, <see cref="T:RomanticWeb.Mapping.Model.IPropertyMapping" /> and <see cref="T:Remotion.Linq.Clauses.FromClauseBase" />.</summary>
            <param name="expression">Base member expression.</param>
            <param name="propertyMapping">Ontology property mapping.</param>
            <param name="target">Target of the invocation.</param>
            <param name="name">Name of the element in the property.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.Expression">
            <summary>Base member expression.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.EntityProperty">
            <summary>EntityProperty accessed.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.CanReduce">
            <summary>Determines if the expression can be reduced.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.NodeType">
            <summary>Gets the node type.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.Type">
            <summary>Gets the type returned by given member.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.PropertyMapping">
            <summary>Gets the ontology property mapping.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.Target">
            <summary>Gets the target of the invocation.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Expressions.EntityPropertyExpression.Name">
            <summary>Gets a name of the element in the property.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.GenericQueryOptimizer">
            <summary>Optimizes SPARQL 1.1 query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.GenericQueryOptimizer.Optimize(RomanticWeb.Linq.Model.Query)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Linq.IQueryOptimizer">
            <summary>Provides a base interface for LINQ to SPARQL query optimization routines.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.IQueryOptimizer.Optimize(RomanticWeb.Linq.Model.Query)">
            <summary>Optimizes given query</summary>
            <param name="query">Query to be optimized.</param>
            <returns>Optimized query.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.IQueryVisitor">
            <summary>Base interface for query visitors.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.IQueryVisitor.Query">
            <summary>Gets an associated query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.IQueryVisitor.MappingsRepository">
            <summary>Gets the mappings repository.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.IQueryVisitor.BaseUriSelector">
            <summary>Gets the base Uri selection policy.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.ConditionalConstrainSelector">
            <summary>Provides an graph dependant constrain selector.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.ConditionalConstrainSelector.#ctor(RomanticWeb.Linq.Model.StrongEntityAccessor,RomanticWeb.Linq.Model.EntityConstrain,RomanticWeb.Linq.Model.EntityConstrain)">
            <summary>Creates an instance of the conditional constrain selector.</summary>
            <param name="entityAccessor">Target entity accessor to wrap around.</param>
            <param name="entityConstrain">Entity constrain.</param>
            <param name="fallbackConstrain">Fallback constrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.ConditionalConstrainSelector.RomanticWeb#Linq#Model#ISelectableQueryComponent#Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.ConditionalConstrainSelector.EntityAccessor">
            <summary>Gets the target entity accessor.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.ConditionalConstrainSelector.EntityConstrain">
            <summary>Gets the entity constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.ConditionalConstrainSelector.FallbackConstrain">
            <summary>Gets the fallback entity constrain.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Identifier">
            <summary>Expresses a literal in the query.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.Identifier.Current">
            <summary>Gets a meta-identiefier that refers to current context's subject.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Identifier.#ctor(System.String)">
            <summary>Base constructor with name passed.</summary>
            <param name="name">Name of this identifier.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Identifier.#ctor(System.String,System.Type)">
            <summary>Base constructor with name passed.</summary>
            <param name="name">Name of this identifier.</param>
            <param name="nativeType">Native type of the identifier.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Identifier.Name">
            <summary>Gets a name of this identifier.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Identifier.NativeType">
            <summary>Gets a native type represented by given identifier.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Identifier.RomanticWeb#Linq#Model#ISelectableQueryComponent#Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Identifier.ToString">
            <summary>Creates a string representation of this identifier.</summary>
            <returns>String representation of this identifier.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Identifier.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Identifier.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.IdentifierEntityAccessor">
            <summary>Provides details about identifier entity accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.IdentifierEntityAccessor.#ctor(RomanticWeb.Linq.Model.Identifier,RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Default constructor with aboutness and a strong entity accessor.</summary>
            <param name="about">Points to the primary topic of given entity accessor.</param>
            <param name="entityAccessor">Strong entity accessor.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.IdentifierEntityAccessor.#ctor(RomanticWeb.Linq.Model.Identifier,Remotion.Linq.Clauses.FromClauseBase,RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Default constructor with aboutness and its source passed.</summary>
            <param name="about">Specifies an entity identifier given accesor uses.</param>
            <param name="sourceExpression">Source of this entity accessor.</param>
            <param name="entityAccessor">Strong entity accessor.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.IdentifierEntityAccessor.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.IdentifierEntityAccessor.EntityAccessor">
            <summary>Gets a strong entity accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.IdentifierEntityAccessor.ToString">
            <summary>Creates a string representation of this graph.</summary>
            <returns>String representation of this graph.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.IdentifierEntityAccessor.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.IdentifierEntityAccessor.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator">
            <summary>Navigates an identifier entity accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.#ctor(RomanticWeb.Linq.Model.IdentifierEntityAccessor)">
            <summary>Default constructor with nagivated identifier entity accessor.</summary>
            <param name="entityAccessor">Nagivated entity accessor.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IdentifierEntityAccessorNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator">
            <summary>Navigates entity type constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.#ctor(RomanticWeb.Linq.Model.EntityTypeConstrain)">
            <summary>Default constructor with nagivated entity type constrain.</summary>
            <param name="entityTypeConstrain">Nagivated entity typeconstrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityTypeConstrainNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator">
            <summary>Provides a base interface for query component navigators that can have child elements.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator">
            <summary>Navigates optional patterns.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.#ctor(RomanticWeb.Linq.Model.OptionalPattern)">
            <summary>Default constructor with nagivated optional patterns.</summary>
            <param name="optionalPattern">Nagivated optional patterns.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.OptionalPatternNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorAttribute">
            <summary>Defines a navigator type for given query component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorAttribute.#ctor(System.Type)">
            <summary>Constructor with navigator type passed.</summary>
            <param name="navigatorType">Navigator type.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorAttribute.NavigatorType">
            <summary>Gets a navigator type.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase">
            <summary>Serves as a base navigator class.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.#ctor(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Creates a component navigator.</summary>
            <param name="component">Navigated component.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.RomanticWeb#Linq#Model#Navigators#IQueryComponentNavigator#NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.op_Equality(RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase,RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase)">
            <summary>Checks for equality of two query component operators.</summary>
            <param name="operandA">Left operand.</param>
            <param name="operandB">Right operand.</param>
            <returns><b>true</b> if both operands has the navigated component equals, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.op_Inequality(RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase,RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase)">
            <summary>Checks for inequality of two query component operators.</summary>
            <param name="operandA">Left operand.</param>
            <param name="operandB">Right operand.</param>
            <returns><b>true</b> if both operands has the navigated component different, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            true  if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorBase.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.QueryNavigator">
            <summary>Navigates query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.#ctor(RomanticWeb.Linq.Model.Query)">
            <summary>Default constructor with nagivated query.</summary>
            <param name="query">Nagivated query.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.QueryNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.QueryNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator">
            <summary>Navigates strong (with graph) entity accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.#ctor(RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Default constructor with nagivated entity accessor.</summary>
            <param name="entityAccessor">Nagivated entity accessor.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.StrongEntityAccessorNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.ListNavigator">
            <summary>Navigates a list.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.#ctor(RomanticWeb.Linq.Model.List)">
            <summary>Default constructor with nagivated list.</summary>
            <param name="list">Nagivated list.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.ListNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.ListNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.AliasNavigator">
            <summary>Navigates an alias.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.#ctor(RomanticWeb.Linq.Model.Alias)">
            <summary>Default constructor with nagivated alias.</summary>
            <param name="alias">Nagivated alias.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.AliasNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.AliasNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator">
            <summary>Navigates unbound constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.#ctor(RomanticWeb.Linq.Model.UnboundConstrain)">
            <summary>Default constructor with nagivated unbound constrain.</summary>
            <param name="unboundConstrain">Nagivated unbound constrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnboundConstrainNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator">
            <summary>Navigates binary operators.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.#ctor(RomanticWeb.Linq.Model.BinaryOperator)">
            <summary>Default constructor with nagivated binary operator.</summary>
            <param name="binaryOperator">Nagivated binary operator.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.BinaryOperatorNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.CallNavigator">
            <summary>Navigates calls.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.#ctor(RomanticWeb.Linq.Model.Call)">
            <summary>Default constructor with nagivated call.</summary>
            <param name="call">Nagivated call.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.CallNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.CallNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.FilterNavigator">
            <summary>Navigates filters.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.#ctor(RomanticWeb.Linq.Model.Filter)">
            <summary>Default constructor with nagivated filter.</summary>
            <param name="filter">Nagivated filter.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.FilterNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.FilterNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator">
            <summary>Navigates entity constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.#ctor(RomanticWeb.Linq.Model.EntityConstrain)">
            <summary>Default constructor with nagivated entity constrain.</summary>
            <param name="entityConstrain">Nagivated entity constrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.EntityConstrainNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator">
            <summary>Navigates unary operator.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.#ctor(RomanticWeb.Linq.Model.UnaryOperator)">
            <summary>Default constructor with nagivated unary operator.</summary>
            <param name="unaryOperator">Nagivated unary operator.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.NavigatedComponent">
            <summary>Gets a navigated component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.CanAddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component can accept another component as a child.</summary>
            <param name="component">Component to be added.</param>
            <returns><b>true</b> if given component can be added, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.ContainsComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Determines if the given component contains another component as a child.</summary>
            <param name="component">Component to be checked.</param>
            <returns><b>true</b> if given component is already contained, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.AddComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Adds component as a child of another component.</summary>
            <param name="component">Component to be added.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.ReplaceComponent(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Replaces given component with another component.</summary>
            <param name="component">Component to be replaced.</param>
            <param name="replacement">Component to be put instead.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Navigators.UnaryOperatorNavigator.GetComponents">
            <summary>Retrieves all child components.</summary>
            <returns>Enumeration of all child components.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.EntityTypeConstrain">
            <summary>Represents an entity type constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityTypeConstrain.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityTypeConstrain.#ctor(System.Uri,System.Linq.Expressions.Expression,System.Uri[])">
            <summary>Constructor with entity type Uri passed.</summary>
            <param name="type">Entity type</param>
            <param name="targetExpression">Target expression that was source of this constrain.</param>
            <param name="inheritedTypes">Optional inherited types of the entity.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityTypeConstrain.Predicate">
            <summary>Gets or sets a predicate for this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityTypeConstrain.Value">
            <summary>Gets or sets an object for this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityTypeConstrain.InheritedTypes">
            <summary>Gets an enumeration of inherited entity types.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityTypeConstrain.ToString">
            <summary>Creates a string representation of this entity type constrain.</summary>
            <returns>String representation of this entity type constrain.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityTypeConstrain.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityTypeConstrain.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.OptionalPattern">
            <summary>Represents a binary operator in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.OptionalPattern.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.OptionalPattern.Patterns">
            <summary>Gets an enumeration of optional patterns.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.OptionalPattern.ToString">
            <summary>Creates a string representation of this optional pattern.</summary>
            <returns>String representation of this optional pattern.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.OptionalPattern.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.OptionalPattern.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.List">
            <summary>Expresses a literal in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.List.#ctor">
            <summary>Base parameterles constructor.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.List.Values">
            <summary>Gets a list of values.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.List.ToString">
            <summary>Creates a string representation of this literal.</summary>
            <returns>String representation of this literal.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.List.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.List.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Prefix">
            <summary>Expresses a prefix in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Prefix.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Prefix.#ctor(System.String,System.Uri)">
            <summary>Constructs a complete prefix.</summary>
            <param name="namespacePrefix">Namespace prefix.</param>
            <param name="namespaceUri">Namespace URI.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Prefix.NamespacePrefix">
            <summary>Gets or sets a namespace prefix.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Prefix.NamespaceUri">
            <summary>Gets or sets a namespace URI.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Prefix.ToString">
            <summary>Creates a string representation of this prefix.</summary>
            <returns>String representation of this prefix.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Prefix.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Prefix.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Query">
            <summary>Represents a whole query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.#ctor(RomanticWeb.Linq.IVariableNamingStrategy,RomanticWeb.Linq.IVariableNamingConvention)">
            <summary>Constructor with subject and variable naming strategy passed.</summary>
            <param name="variableNamingStrategy">Varialbe naming strategy.</param>
            <param name="variableNamingConvention">Variable naming convention.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.#ctor(RomanticWeb.Linq.Model.Identifier,RomanticWeb.Linq.IVariableNamingStrategy,RomanticWeb.Linq.IVariableNamingConvention)">
            <summary>Constructor with subject and variable naming strategy passed.</summary>
            <param name="subject">Subject of this query.</param>
            <param name="variableNamingStrategy">Varialbe naming strategy.</param>
            <param name="variableNamingConvention">Variable naming convention.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Prefixes">
            <summary>Gets an enumeration of all prefixes.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Select">
            <summary>Gets an enumeration of all selected expressions.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Elements">
            <summary>Gets an enumeration of all query elements.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.IsSubQuery">
            <summary>Gets a value indicating if the given query is actually a sub query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.QueryForm">
            <summary>Gets a query form of given query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Offset">
            <summary>Gets or sets the offset.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Limit">
            <summary>Gets or sets the limit.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.OrderBy">
            <summary>Gets a map of order by clauses.</summary>
            <remarks>Key is the expression on which the sorting should be performed and the value determines the direction, where <b>true</b> means descending and <b>false</b> is for ascending (default).</remarks>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Query.Subject">
            <summary>Subject of this query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.CreateSubQuery(RomanticWeb.Linq.Model.Identifier)">
            <summary>Creates a new blank query that can act as a sub query for this instance.</summary>
            <param name="subject">Primary subject of the resulting query.</param>
            <remarks>This method doesn't add the resulting query as a sub query of this instance.</remarks>
            <returns>Query that can act as a sub query for this instance.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.CreateVariableName(System.String)">
            <summary>Creates a variable name from given identifier.</summary>
            <param name="identifier">Identifier to be used to abbreviate variable name.</param>
            <returns>Variable name with unique name.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.RetrieveIdentifier(System.String)">
            <summary>Retrieves an identifier from a passed variable name.</summary>
            <param name="variableName">Variable name to retrieve identifier from.</param>
            <returns>Identifier passed to create the variable name.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.CreateIdentifier(System.String)">
            <summary>Creates an identifier from given name.</summary>
            <param name="name">Name.</param>
            <returns>Identifier created from given name.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.ToString">
            <summary>Creates a string representation of this query.</summary>
            <returns>String representation of this query.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Query.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Rised when arguments collection has changed.</summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Eventarguments.</param>
        </member>
        <member name="T:RomanticWeb.Linq.Model.QueryComponent">
            <summary>Provides an abstract for query element.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.QueryComponent.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.QueryElement">
            <summary>Provides an abstract for query element.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.SourceTypes">
            <summary>Enlists possible entity accessor sources.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.SourceTypes.Variable">
            <summary>Variable source.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.SourceTypes.Member">
            <summary>Member source.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.StrongEntityAccessor">
            <summary>Provides details about entity accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.#ctor(RomanticWeb.Linq.Model.Identifier)">
            <summary>Default constructor with aboutness assuming that a source is a variable.</summary>
            <param name="about">Points to the primary topic of given entity accessor.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.#ctor(RomanticWeb.Linq.Model.Identifier,Remotion.Linq.Clauses.FromClauseBase)">
            <summary>Default constructor with aboutness and its source passed.</summary>
            <param name="about">Specifies an entity identifier given accesor uses.</param>
            <param name="sourceExpression">Source of this entity accessor.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.About">
            <summary>Gets a primary topic of this entity accessor.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.Elements">
            <summary>Gets a list of entity accessor elements.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.UnboundGraphName">
            <summary>
            Gets or sets the name of the unbound graph.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.RomanticWeb#Linq#Model#ISelectableQueryComponent#Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.Source">
            <summary>Gets a source type of this accessor.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.StrongEntityAccessor.SourceExpression">
            <summary>Gets a source entity type of this accessor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.ToString">
            <summary>Creates a string representation of this graph.</summary>
            <returns>String representation of this graph.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.StrongEntityAccessor.OnElementsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Rised when elements collection has changed.</summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Eventarguments.</param>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Alias">
            <summary>Expresses an alias in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Alias.#ctor(RomanticWeb.Linq.Model.IQueryComponent,RomanticWeb.Linq.Model.Identifier)">
            <summary>Base constructor with component and alias passed.</summary>
            <param name="component">Component to be aliased.</param>
            <param name="name">Alias.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Alias.Component">
            <summary>Gets or sets a component aliased.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Alias.Name">
            <summary>Gets or sets name of the alias.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Alias.Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Alias.ToString">
            <summary>Creates a string representation of this literal.</summary>
            <returns>String representation of this literal.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Alias.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Alias.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.UnboundConstrain">
            <summary>Provides details about entity constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnboundConstrain.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnboundConstrain.#ctor(RomanticWeb.Linq.Model.IExpression,RomanticWeb.Linq.Model.IExpression,RomanticWeb.Linq.Model.IExpression,System.Linq.Expressions.Expression)">
            <summary>Constructs a complete unbound constrain.</summary>
            <param name="subject">Subject.</param>
            <param name="predicate">Predicate.</param>
            <param name="value">Object.</param>
            <param name="targetExpression">Target expression that was source of this constrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.UnboundConstrain.Subject">
            <summary>Gets or sets a subject for this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.UnboundConstrain.RomanticWeb#Linq#Model#ISelectableQueryComponent#Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.UnboundConstrain.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnboundConstrain.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnboundConstrain.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnboundConstrain.ToString">
            <summary>Creates a string representation of this entity constrain.</summary>
            <returns>String representation of this entity constrain.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.QueryComponentExtensions">
            <summary>Provides useful query component extension methods.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.FindAllComponents``1(RomanticWeb.Linq.Model.Query)">
            <summary>Searches the query object graph for specific items.</summary>
            <typeparam name="T">Type of the item to be searched for.</typeparam>
            <param name="query">Query to be searched through.</param>
            <remarks>This method performs a deep search for all items that match given type and its derivatives.</remarks>
            <returns>Enumeration of found components matching given type.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.FindAllComponents``1(RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Searches the entity accessor object graph for specific items.</summary>
            <typeparam name="T">Type of the item to be searched for.</typeparam>
            <param name="entityAccessor">Entity accessor to be searched through.</param>
            <remarks>This method performs a deep search for all items that match given type and its derivatives.</remarks>
            <returns>Enumeration of found components matching given type.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.FindAllComponents``1(RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator)">
            <summary>Searches the query object graph for specific items.</summary>
            <typeparam name="T">Type of the item to be searched for.</typeparam>
            <param name="queryComponentNavigator">Query component navigator to be searched through.</param>
            <remarks>This method performs a deep search for all items that match given type and its derivatives.</remarks>
            <returns>Enumeration of found components matching given type.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.GetQueryComponentNavigatorAttribute(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Gets a query component navigator attribute for given query component.</summary>
            <param name="queryComponent">Query component to be inspected.</param>
            <returns><see cref="T:RomanticWeb.Linq.Model.Navigators.QueryComponentNavigatorAttribute" /> or null.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.GetQueryComponent(RomanticWeb.Linq.Model.Navigators.IQueryComponentNavigator)">
            <summary>Converts a query component navigator into the query component itself.</summary>
            <param name="queryComponentNavigator">Query component navigator to be converted.</param>
            <returns>Query component.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.QueryComponentExtensions.GetQueryComponentNavigator(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Converts a query component into its navigator.</summary>
            <param name="queryComponent">Query component to be converted.</param>
            <returns>Query component navigator or null.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.MethodNames">
            <summary>Enumerator of all possible query functions.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Add">
            <summary>Add (+)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Substract">
            <summary>Substraction (-)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Multiply">
            <summary>Multiplication (*)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Divide">
            <summary>Division (/)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.AddAndAssign">
            <summary>Add and assign (+=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.SubstractAndAssign">
            <summary>Substract and assign (-=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.MultiplyAndAssign">
            <summary>Multiply and assign (*=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.DivideAndAssign">
            <summary>Divide and assign (/=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Modulo">
            <summary>Modulo (%)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.ModuloAndAssign">
            <summary>Modulo and assign (%=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseShiftLeft">
            <summary>Bitiwse shift left (&lt;&lt;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseShiftLeftAndAssign">
            <summary>Bitiwse shift left and assign (&lt;&lt;=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseShiftRight">
            <summary>Bitiwse shift right (&gt;&gt;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseShiftRightAndAssign">
            <summary>Bitiwse shift right and assign (&gt;&gt;=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseAnd">
            <summary>Bitiwse AND (&amp;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseAndAndAssign">
            <summary>Bitiwse AND and assign (&amp;=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseOr">
            <summary>Bitiwse OR (|)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseOrAndAssign">
            <summary>Bitiwse OR and assign (|=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseNot">
            <summary>Bitiwse NOT (~)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseNotAndAssign">
            <summary>Bitiwse NOT and assign (~=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseXor">
            <summary>Bitiwse exclusive OR (^)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.BitwiseXorAndAssign">
            <summary>Bitiwse exclusive OR and assign (^=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.And">
            <summary>Logical AND (&amp;&amp;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Or">
            <summary>Logical OR (||)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Not">
            <summary>Logical NOT (!)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Xor">
            <summary>Logical exclusive OR (^^)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Equal">
            <summary>Equals (==)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.NotEqual">
            <summary>Not equals (!=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.GreaterThan">
            <summary>Greater than (&gt;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.GreaterThanOrEqual">
            <summary>Greater than or equal (&gt;=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.LessThan">
            <summary>Less than (&lt;)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.LessThanOrEqual">
            <summary>Less than or equal (&lt;=)</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Convert">
            <summary>Conversion.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Abs">
            <summary>Absolute value.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Avg">
            <summary>Average value.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Sum">
            <summary>Sum of values.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Count">
            <summary>Count values.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.In">
            <summary>In set operator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Any">
            <summary>Exists operator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Distinct">
            <summary>Distinct.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Ceiling">
            <summary>Ceiling.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Floor">
            <summary>Ceiling.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Round">
            <summary>Round.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.RandomInt">
            <summary>Random integer number.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.RandomFloat">
            <summary>Random floating point number.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Bind">
            <summary>Binds a constant to a variable.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Bound">
            <summary>Checks if the given variable is bound.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.If">
            <summary>Inline conditional evaluator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Offset">
            <summary>Offset operator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Limit">
            <summary>Limit operator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.StartsWith">
            <summary>String starts with.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.EndsWith">
            <summary>String ends with.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Contains">
            <summary>String contains.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Regex">
            <summary>String mathes regular expression.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Replace">
            <summary>Replace string with string.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Substring">
            <summary>Substring.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.ToUpper">
            <summary>Convertion to upper case.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.ToLower">
            <summary>Convertion to lower case.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Length">
            <summary>String length.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.String">
            <summary>Conversion to string.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Now">
            <summary>Gets current date and time.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Year">
            <summary>Gets current year.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Month">
            <summary>Gets current month.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Day">
            <summary>Gets current day of month.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Hour">
            <summary>Gets current hour.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Minute">
            <summary>Gets current minute.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Second">
            <summary>Gets current second.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.MethodNames.Milisecond">
            <summary>Gets current milisecond.</summary>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Call">
            <summary>Represents a function call in query.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.Call.Operator">
            <summary>Helper for determining if the given function is an operator.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.Call.AndAssign">
            <summary>Helper for determining if the given function is an operator with additional assignment.</summary>
        </member>
        <member name="F:RomanticWeb.Linq.Model.Call.Logical">
            <summary>Helper for determining if the given function is logical.</summary>
            <remarks>This helper value is usually used in conjuction with <see cref="T:RomanticWeb.Linq.Model.MethodNames" /></remarks>
        </member>
        <member name="F:RomanticWeb.Linq.Model.Call.Comparison">
            <summary>Helper for determining if the given function is comparison.</summary>
            <remarks>This helper value is usually used in conjuction with <see cref="T:RomanticWeb.Linq.Model.MethodNames" /></remarks>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Call.#ctor(RomanticWeb.Linq.Model.MethodNames)">
            <summary>Default constructor with method name passed.</summary>
            <param name="methodName">Method name.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Call.Arguments">
            <summary>Gets a list of arguments.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Call.Member">
            <summary>Gets a called member.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Call.RomanticWeb#Linq#Model#ISelectableQueryComponent#Expressions">
            <summary>Gets an enumeration of selectable expressions.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Call.ToString">
            <summary>Creates a string representation of this call.</summary>
            <returns>String representation of this call.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Call.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Call.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Call.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Rised when arguments collection has changed.</summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Eventarguments.</param>
        </member>
        <member name="T:RomanticWeb.Linq.Model.BinaryOperator">
            <summary>Represents a binary operator in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.#ctor(RomanticWeb.Linq.Model.MethodNames)">
            <summary>Default constructor with operator name.</summary>
            <param name="operatorName">Operator name.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.#ctor(RomanticWeb.Linq.Model.MethodNames,RomanticWeb.Linq.Model.IExpression,RomanticWeb.Linq.Model.IExpression)">
            <summary>Constructor with operator name and both operands passed.</summary>
            <param name="operatorName">Operator name.</param>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.BinaryOperator.LeftOperand">
            <summary>Gets or sets left operand of this operator.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.BinaryOperator.RightOperand">
            <summary>Gets or sets right operand of this operator.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.ToString">
            <summary>Creates a string representation of this binary operator.</summary>
            <returns>String representation of this binary operator.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.BinaryOperator.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Rised when arguments collection has changed.</summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Eventarguments.</param>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Filter">
            <summary>Provides details about filter.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Filter.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Filter.#ctor(RomanticWeb.Linq.Model.IExpression)">
            <summary>Default constructor with filter expresion passed.</summary>
            <param name="expression">Filter expression.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Filter.Expression">
            <summary>Gets a filter expression.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Filter.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Filter.ToString">
            <summary>Creates a string representation of this filter.</summary>
            <returns>String representation of this filter.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Filter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Filter.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.UnaryOperator">
            <summary>Represents an unary operator.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.#ctor(RomanticWeb.Linq.Model.MethodNames)">
            <summary>Default constructor with operator name.</summary>
            <param name="operatorName">Operator name.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.#ctor(RomanticWeb.Linq.Model.MethodNames,RomanticWeb.Linq.Model.IExpression)">
            <summary>Constructor with operator name and both operands passed.</summary>
            <param name="operatorName">Operator name.</param>
            <param name="operand">Operand.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.UnaryOperator.Operand">
            <summary>Gets or sets an operand of this operator.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.ToString">
            <summary>Creates a string representation of this unary operator.</summary>
            <returns>String representation of this unary operator.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.UnaryOperator.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Rised when arguments collection has changed.</summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Eventarguments.</param>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Operator">
            <summary>Provides an abstraction for operators.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Operator.#ctor(RomanticWeb.Linq.Model.MethodNames)">
            <summary>Default constructor with operator name.</summary>
            <param name="operatorName">Operator name.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Operator.ToString">
            <summary>Creates a string representation of this operator.</summary>
            <returns>String representation of this operator.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.Literal">
            <summary>Expresses a literal in the query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Literal.#ctor(System.Type)">
            <summary>Constructor for creating <b>null</b> literals of given type.</summary>
            <param name="valueType"></param>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Literal.#ctor(System.Object)">
            <summary>Base constructor with value passed.</summary>
            <param name="value">Value of this literal.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Literal.Value">
            <summary>Gets a value of this literal.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.Literal.ValueType">
            <summary>Gets the type of value.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Literal.ToString">
            <summary>Creates a string representation of this literal.</summary>
            <returns>String representation of this literal.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Literal.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.Literal.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Model.EntityConstrain">
            <summary>Provides details about entity constrain.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityConstrain.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityConstrain.#ctor(RomanticWeb.Linq.Model.IExpression,RomanticWeb.Linq.Model.IExpression,System.Linq.Expressions.Expression)">
            <summary>Constructs a complete entity constrain.</summary>
            <param name="predicate">Predicate.</param>
            <param name="value">Object.</param>
            <param name="targetExpression">Target expression that was source of this constrain.</param>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityConstrain.Predicate">
            <summary>Gets or sets a predicate for this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityConstrain.Value">
            <summary>Gets or sets an object for this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityConstrain.TargetExpression">
            <summary>Gets the target expression that generated this constrain.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Model.EntityConstrain.OwnerQuery">
            <summary>Gets an owning query.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityConstrain.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityConstrain.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.Model.EntityConstrain.ToString">
            <summary>Creates a string representation of this entity constrain.</summary>
            <returns>String representation of this entity constrain.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.IVariableNamingConvention">
            <summary>Represents a base interface for variable naming conventions.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.IVariableNamingConvention.GetIdentifierForName(System.String)">
            <summary>Gets the identifier name in given convention for given name.</summary>
            <param name="name">Name to be transformed.</param>
            <returns><see cref="T:System.String" /> representing an identifier build from given name.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.IVariableNamingStrategy">
            <summary>Provides a base interface for variable naming strategies.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.IVariableNamingStrategy.GetNameForIdentifier(RomanticWeb.Linq.Model.IQuery,System.String)">
            <summary>Gets a variable name for given identifier.</summary>
            <param name="queryContext">Query context.</param>
            <param name="identifier">Base identifier for which the name must be created.</param>
            <returns>Name of the variale coresponding for given identifier.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.IVariableNamingStrategy.ResolveNameToIdentifier(System.String)">
            <summary>Reverses the process and resolves an initial identifier passed to create a variable name.</summary>
            <param name="name">Name to be resolved.</param>
            <returns>Identifier that was passed to create a given variable name.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.NonEntityQueryModelVisitor">
            <summary>Converts LINQ query model to SPARQL abstraction, but for LINQ parts that should not create sandalone SPARQL queries.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.NonEntityQueryModelVisitor.Query">
            <summary>Gets a SPARQL abstraction model.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.NonEntityQueryModelVisitor.Result">
            <summary>Gets a resulting query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.NonEntityQueryModelVisitor.From">
            <summary>Gets a from component.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)">
            <summary>Visits a query model.</summary>
            <param name="queryModel">Query model to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <summary>Visits a select clause.</summary>
            <param name="selectClause">Select clause to be visited.</param>
            <param name="queryModel">Query model containing given select clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits a where clause.</summary>
            <param name="whereClause">Where clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the where clause in the query model.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>Visits a main from clause.</summary>
            <param name="fromClause">Main from clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits an additional from clause.</summary>
            <param name="fromClause">From clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the where clause in the query model.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits a result operator.</summary>
            <param name="resultOperator">Result operator to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the visited result operator in the result operators collection.</param>
        </member>
        <member name="M:RomanticWeb.Linq.NonEntityQueryModelVisitor.VisitBodyClauses(System.Collections.ObjectModel.ObservableCollection{Remotion.Linq.Clauses.IBodyClause},Remotion.Linq.QueryModel)">
            <summary>Visits body clauses.</summary>
            <param name="bodyClauses">Body clause to be visited.</param>
            <param name="queryModel">Query model containing given body clause.</param>
        </member>
        <member name="T:RomanticWeb.Linq.EntityQueryVisitor">
            <summary>Visits query expressions.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.#ctor(RomanticWeb.Linq.Model.Query,RomanticWeb.IEntityContext)">
            <summary>Creates an instance of the query visitor.</summary>
            <param name="query">Query to be filled.</param>
            <param name="entityContext">Entity context.</param>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.RomanticWeb#Linq#IQueryVisitor#Query">
            <summary>Gets an associated query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.RomanticWeb#Linq#IQueryVisitor#MappingsRepository">
            <summary>Gets the mappings repository.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.RomanticWeb#Linq#IQueryVisitor#BaseUriSelector">
            <summary>Gets the base Uri selection policy.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.Query">
            <summary>Gets an associated query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.ItemNameOverride">
            <summary>Gets or sets an item name to be used when creating entity accessors.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.MappingsRepository">
            <summary>Gets the mappings repository.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryVisitor.ConstantFromClause">
            <summary>Gets or sets an auxiliar constant from clause.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.RetrieveComponent">
            <summary>Retrevies last visited and transformed query and prepares for next inspection.</summary>
            <returns>Query component visited or query itself.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)">
            <summary>Visits a query source expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>Visits a binary expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Visits an unary expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Visits a method call expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitIsMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Visits an <see cref="M:RomanticWeb.Entities.EntityExtensions.Is(RomanticWeb.Entities.IEntity,System.Uri)" /> method call.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Returns visited expression.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitPredicateMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Visits an <see cref="M:RomanticWeb.Entities.EntityExtensions.Predicate(RomanticWeb.Entities.IEntity,System.Uri)" /> method call.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Returns visited expression.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>Visits a member expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitProperty(System.Linq.Expressions.MemberExpression)">
            <summary>Visits a property expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>Visits a constant expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)">
            <summary>Visits a sub-query expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitEntityIdUri(System.Linq.Expressions.MemberExpression)">
            <summary>Visits an Uri property expression called on <see cref="T:RomanticWeb.Entities.EntityId" />.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitEntityId(RomanticWeb.Linq.Expressions.EntityIdentifierExpression)">
            <summary>Visits an entity identifier member.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitEntityProperty(RomanticWeb.Linq.Expressions.EntityPropertyExpression)">
            <summary>Visits an entity member.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>Visits a type binary expression.</summary>
            <param name="expression">Expression to be visited.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryVisitor.CreateUnhandledItemException``1(``0,System.String)">
            <summary>Visits a unhandled expression.</summary>
            <param name="unhandledItem">Expression beeing unhandled.</param>
            <param name="visitMethod">Visitor method.</param>
            <returns>Expression visited</returns>
        </member>
        <member name="T:RomanticWeb.Linq.Sparql.SparqlQueryVariables">
            <summary>
            Represents variables used in Romantic Web's wueries
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Entity">
            <summary>
            Gets the entity variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Subject">
            <summary>
            Gets the subject variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Predicate">
            <summary>
            Gets the predicate variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Object">
            <summary>
            Gets the object variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Owner">
            <summary>
            Gets the owning entity variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.MetaGraph">
            <summary>
            Gets the metagraph variable name.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.SparqlQueryVariables.Scalar">
            <summary>
            Gets the scalar variable name.
            </summary>
        </member>
        <member name="T:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor">
            <summary>Provides a SPARQL query parsing mechanism.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.#ctor">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor"/></summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.CommandText">
            <summary>Gets a command text string.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.Variables">
            <summary>
            Gets the SPARQL query's variables.
            </summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.CommandTextBuilder">
            <summary>Gets the <see cref="T:System.Text.StringBuilder" /> used to create the query command text.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.CurrentEntityAccessor">
            <summary>Gets the current <see cref="T:RomanticWeb.Linq.Model.StrongEntityAccessor" />.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Visit a query component.</summary>
            <param name="component">Component to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitQuery(RomanticWeb.Linq.Model.IQuery)">
            <summary>Visit a query.</summary>
            <param name="query">Query to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitCall(RomanticWeb.Linq.Model.Call)">
            <summary>Visit a function call.</summary>
            <param name="call">Function call to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitUnaryOperator(RomanticWeb.Linq.Model.UnaryOperator)">
            <summary>Visit an unary operator.</summary>
            <param name="unaryOperator">Unary operator to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitBinaryOperator(RomanticWeb.Linq.Model.BinaryOperator)">
            <summary>Visit a binary operator.</summary>
            <param name="binaryOperator">Binary operator to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitEntityConstrain(RomanticWeb.Linq.Model.EntityConstrain)">
            <summary>Visit an entity constrain.</summary>
            <param name="entityConstrain">Entity constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitEntityTypeConstrain(RomanticWeb.Linq.Model.EntityTypeConstrain)">
            <summary>Visit an entity type constrain.</summary>
            <param name="entityTypeConstrain">Entity type constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitUnboundConstrain(RomanticWeb.Linq.Model.UnboundConstrain)">
            <summary>Visit an unbound constrain.</summary>
            <param name="unboundConstrain">Unbound constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitLiteral(RomanticWeb.Linq.Model.Literal)">
            <summary>Visit a literal.</summary>
            <param name="literal">Literal to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitList(RomanticWeb.Linq.Model.List)">
            <summary>Visit a list.</summary>
            <param name="list">List to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitAlias(RomanticWeb.Linq.Model.Alias)">
            <summary>Visit an alias.</summary>
            <param name="alias">Alias to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitPrefix(RomanticWeb.Linq.Model.IPrefix)">
            <summary>Visit a prefix.</summary>
            <param name="prefix">Prefix to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitIdentifier(RomanticWeb.Linq.Model.Identifier)">
            <summary>Visit a identifier.</summary>
            <param name="identifier">Identifier to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitFilter(RomanticWeb.Linq.Model.Filter)">
            <summary>Visit a filter.</summary>
            <param name="filter">Filter to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitIdentifierEntityAccessor(RomanticWeb.Linq.Model.IdentifierEntityAccessor)">
            <summary>Visit an identifier entity accessor.</summary>
            <param name="entityAccessor">Identifier entity accessor to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitStrongEntityAccessor(RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Visit a strong entity accessor.</summary>
            <param name="entityAccessor">Strong entity accessor to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitOptionalPattern(RomanticWeb.Linq.Model.OptionalPattern)">
            <summary>Visit an optional patterns.</summary>
            <param name="optionalPattern">Optional patterns accessor to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitQueryResultModifiers(System.Collections.Generic.IDictionary{RomanticWeb.Linq.Model.IExpression,System.Boolean},System.Int32,System.Int32)">
            <summary>Visits a dicionary of query result modifiers with optional offset and limit.</summary>
            <param name="orderByExpressions">Dictionary of result modiefiers.</param>
            <param name="offset">Offset in the resultset.</param>
            <param name="limit">Limit of the resultset.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Sparql.GenericSparqlQueryVisitor.VisitStrongEntityAccessorGraph(RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Visits a graph of a strong entity accessor.</summary>
            <param name="entityAccessor">Target strong entity accessor.</param>
        </member>
        <member name="T:RomanticWeb.Linq.UniqueVariableNamingStrategy">
            <summary>Provides constistent and non-coliding names for identifiers.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.UniqueVariableNamingStrategy.GetNameForIdentifier(RomanticWeb.Linq.Model.IQuery,System.String)">
            <summary>Gets a variable name for given identifier.</summary>
            <param name="queryContext">Query context.</param>
            <param name="identifier">Base identifier for which the name must be created.</param>
            <returns>Name of the variale coresponding for given identifier.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.UniqueVariableNamingStrategy.ResolveNameToIdentifier(System.String)">
            <summary>Reverses the process and resolves an initial identifier passed to create a variable name.</summary>
            <param name="name">Name to be resolved.</param>
            <returns>Identifier that was passed to create a given variable name.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.EntityQueryable`1">
            <summary>Provides an LINQ compatible access to the triple store.</summary>
            <typeparam name="T">Type of entities to be queried.</typeparam>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryable`1.#ctor(RomanticWeb.IEntityContext,RomanticWeb.IEntitySource,RomanticWeb.IEntityStore)">
            <summary>Creates an instance of the queryable entity factory.</summary>
            <param name="entityContext">Entity context to be used by this provider.</param>
            <param name="entitySource">Entity source.</param>
            <param name="store">Entity store</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryable`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>Creates an instance of the queryable entity source.</summary>
            <param name="provider">Query provider to be used by this queryable instance.</param>
            <param name="expression">Expression to be parsed.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryable`1.ToString">
            <summary>Gets a string representation of this query serialized with underlying query provided.</summary>
            <returns>String of this query.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryable`1.ToTraceString">
            <summary>Gets the underlying entity source query string.</summary>
            <returns>String with a query string to be run on the underlying entity source.</returns>
        </member>
        <member name="T:RomanticWeb.Linq.EntityQueryExecutor">
            <summary>Executes queries against underlying triple store.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryExecutor.#ctor(RomanticWeb.IEntityContext,RomanticWeb.IEntitySource,RomanticWeb.IEntityStore)">
            <summary>
            Creates an instance of the query executor aware of the entities queried.
            </summary>
            <param name="entityContext">Entity factory to be used when creating objects.</param>
            <param name="entitySource">Entity source.</param>
            <param name="store">Entity store</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)">
            <summary>Returns a scalar value beeing a result of a query.</summary>
            <typeparam name="T">Type of element to be returned.</typeparam>
            <param name="queryModel">Query model to be parsed.</param>
            <returns>Single scalar value beeing result of a query.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)">
            <summary>Returns a single entity beeing a result of a query.</summary>
            <typeparam name="T">Type of element to be returned.</typeparam>
            <param name="queryModel">Query model to be parsed.</param>
            <param name="returnDefaultWhenEmpty">Tells the executor to return a default value in case of an empty result.</param>
            <returns>Single entity beeing result of a query.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryExecutor.ExecuteCollection``1(Remotion.Linq.QueryModel)">
            <summary>Returns a resulting collection of a query.</summary>
            <typeparam name="T">Type of elements to be returned.</typeparam>
            <param name="queryModel">Query model to be parsed.</param>
            <returns>Enumeration of resulting entities matching given query.</returns>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryExecutor.GetCommandText(Remotion.Linq.QueryModel)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Linq.EntityQueryModelVisitor">
            <summary>Converts LINQ query model to SPARQL abstraction.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.#ctor(RomanticWeb.IEntityContext)">
            <summary>Default constructor with mappings repository passed.</summary>
            <param name="entityContext">Entity context.</param>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.Query">
            <summary>Gets a SPARQL abstraction model.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.RomanticWeb#Linq#IQueryVisitor#MappingsRepository">
            <summary>Gets the mappings repository.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.RomanticWeb#Linq#IQueryVisitor#BaseUriSelector">
            <summary>Gets the base Uri selection policy.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.Result">
            <summary>Gets a resulting query.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.PropertyMapping">
            <summary>Gets the value converter for property selectors.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)">
            <summary>Visits a query model.</summary>
            <param name="queryModel">Query model to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <summary>Visits a select clause.</summary>
            <param name="selectClause">Select clause to be visited.</param>
            <param name="queryModel">Query model containing given select clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits a where clause.</summary>
            <param name="whereClause">Where clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the where clause in the query model.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits an additional from clause.</summary>
            <param name="fromClause">From clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the where clause in the query model.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>Visits a main from clause.</summary>
            <param name="fromClause">Main from clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits a result operator.</summary>
            <param name="resultOperator">Result operator to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the visited result operator in the result operators collection.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitBodyClauses(System.Collections.ObjectModel.ObservableCollection{Remotion.Linq.Clauses.IBodyClause},Remotion.Linq.QueryModel)">
            <summary>Visits body clauses.</summary>
            <param name="bodyClauses">Body clause to be visited.</param>
            <param name="queryModel">Query model containing given body clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitOrderings(System.Collections.ObjectModel.ObservableCollection{Remotion.Linq.Clauses.Ordering},Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause)">
            <summary>Visits order by clauses.</summary>
            <param name="orderings">Order by clauses to be visited.</param>
            <param name="queryModel">Query model containing given body clause.</param>
            <param name="orderByClause">First order by clause.</param>
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.VisitQuerableFromClause(Remotion.Linq.Clauses.FromClauseBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>Visits a from clause.</summary>
            <param name="fromClause">From clause to be visited.</param>
            <param name="queryModel">Query model containing given from clause.</param>
            <param name="index">Index of the where clause in the query model. In case of the main from clause this value is -1.</param>
        </member>
        <member name="F:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.Default">
            <summary>Gets the default instance of the <see cref="T:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping" />.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.RomanticWeb#Mapping#Model#IPropertyMapping#EntityMapping">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.RomanticWeb#Mapping#Model#IPropertyMapping#Uri">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.Name">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.RomanticWeb#Mapping#Model#IPropertyMapping#Converter">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Linq.EntityQueryModelVisitor.IdentifierPropertyMapping.RomanticWeb#Mapping#Model#IPropertyMapping#Accept(RomanticWeb.Mapping.Visitors.IMappingModelVisitor)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Linq.Visitor.QueryVisitorBase">
            <summary>Provides an abstraction layer on entity query model.</summary>
        </member>
        <member name="P:RomanticWeb.Linq.Visitor.QueryVisitorBase.MetaGraphUri">
            <summary>Sets a meta-graph URI.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitComponent(RomanticWeb.Linq.Model.IQueryComponent)">
            <summary>Visit a query component.</summary>
            <param name="component">Component to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitQuery(RomanticWeb.Linq.Model.IQuery)">
            <summary>Visit a query.</summary>
            <param name="query">Query to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitCall(RomanticWeb.Linq.Model.Call)">
            <summary>Visit a function call.</summary>
            <param name="call">Function call to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitUnaryOperator(RomanticWeb.Linq.Model.UnaryOperator)">
            <summary>Visit an unary operator.</summary>
            <param name="unaryOperator">Unary operator to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitBinaryOperator(RomanticWeb.Linq.Model.BinaryOperator)">
            <summary>Visit a binary operator.</summary>
            <param name="binaryOperator">Binary operator to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitEntityConstrain(RomanticWeb.Linq.Model.EntityConstrain)">
            <summary>Visit an entity constrain.</summary>
            <param name="entityConstrain">Entity constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitEntityTypeConstrain(RomanticWeb.Linq.Model.EntityTypeConstrain)">
            <summary>Visit an entity type constrain.</summary>
            <param name="entityTypeConstrain">Entity type constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitUnboundConstrain(RomanticWeb.Linq.Model.UnboundConstrain)">
            <summary>Visit an unbound constrain.</summary>
            <param name="unboundConstrain">Unbound constrain to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitLiteral(RomanticWeb.Linq.Model.Literal)">
            <summary>Visit a literal.</summary>
            <param name="literal">Literal to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitList(RomanticWeb.Linq.Model.List)">
            <summary>Visit a list.</summary>
            <param name="list">List to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitAlias(RomanticWeb.Linq.Model.Alias)">
            <summary>Visit an alias.</summary>
            <param name="alias">Alias to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitPrefix(RomanticWeb.Linq.Model.IPrefix)">
            <summary>Visit a prefix.</summary>
            <param name="prefix">Prefix to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitIdentifier(RomanticWeb.Linq.Model.Identifier)">
            <summary>Visit a identifier.</summary>
            <param name="identifier">Identifier to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitFilter(RomanticWeb.Linq.Model.Filter)">
            <summary>Visit a filter.</summary>
            <param name="filter">Filter to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitIdentifierEntityAccessor(RomanticWeb.Linq.Model.IdentifierEntityAccessor)">
            <summary>Visit an identifier entity accessor.</summary>
            <param name="entityAccessor">Identifier entity accessor to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitStrongEntityAccessor(RomanticWeb.Linq.Model.StrongEntityAccessor)">
            <summary>Visit a strong entity accessor.</summary>
            <param name="entityAccessor">Strong entity accessor to be visited.</param>
        </member>
        <member name="M:RomanticWeb.Linq.Visitor.QueryVisitorBase.VisitOptionalPattern(RomanticWeb.Linq.Model.OptionalPattern)">
            <summary>Visit an optional patterns.</summary>
            <param name="optionalPattern">Optional patterns to be visited.</param>
        </member>
        <member name="T:RomanticWeb.Linq.ExceptionHelper">
            <summary>Provides usefull common exception related methods.</summary>
        </member>
        <member name="M:RomanticWeb.Linq.ExceptionHelper.ThrowGenericArgumentOutOfRangeException(System.String,System.Type,System.Type)">
            <summary>Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.</summary>
            <param name="argumentName">Name of the generic type argument.</param>
            <param name="expectedType">Expected type.</param>
            <param name="foundType">Passed type.</param>
        </member>
        <member name="M:RomanticWeb.Linq.ExceptionHelper.ThrowInvalidCastException(System.Type,System.Type)">
            <summary>Throws an <see cref="T:System.InvalidCastException"/>.</summary>
            <param name="expectedType">Expected type.</param>
            <param name="foundType">Passed type.</param>
        </member>
        <member name="M:RomanticWeb.Linq.ExceptionHelper.ThrowNotSupportedException(System.String)">
            <summary>Throws a <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expressionText">Unsuported expression text.</param>
        </member>
        <member name="M:RomanticWeb.Linq.ExceptionHelper.ThrowMappingException(System.Uri)">
            <summary>Throws a <see cref="T:RomanticWeb.Mapping.MappingException" />.</summary>
            <param name="predicate">Predicate Uri for which mapping was not found.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.AmbiguousPropertyException">
            <summary>
            Represents an error which occurs, when entity mapping contains
            multiple property mappings for a property
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.DictionaryAttribute">
            <summary>Maps a dictionary and it's key/value properties to an RDF predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.DictionaryAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.DictionaryAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="term">The term.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.DictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.DictionaryAttribute"/> class.
            </summary>
            <param name="termUri">The term URI.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute">
            <summary>
            Base class for mapping an RDF predicate
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute"/> class.
            </summary>
            <param name="prefix">The term prefix.</param>
            <param name="term">The term name.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute"/> class.
            </summary>
            <param name="termUri">The term URI.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.PredicateMappingAttribute.ConverterType">
            <summary>Gets or sets the type of the converter.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.KeyAttribute">
            <summary>Maps the dictionary's key property to an RDF predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.KeyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.KeyAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="term">The term.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.KeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.KeyAttribute"/> class.
            </summary>
            <param name="termUri">The term URI.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.ValueAttribute">
            <summary>Maps the dictionary's value property to an RDF predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.ValueAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.ValueAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="term">The term.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.ValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.ValueAttribute"/> class.
            </summary>
            <param name="termUri">The term URI.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.CollectionAttribute">
            <summary>Maps a collection to an RDF predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.CollectionAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.CollectionAttribute"/> class.</summary>
            <param name="prefix">Namespace prefix.</param>
            <param name="propertyName">Predicate name.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.CollectionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.CollectionAttribute"/> class.</summary>
            <param name="propertyUri">The property URI.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.CollectionAttribute.StoreAs">
            <summary>Gets or sets the storage strategy.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.CollectionAttribute.ConverterType">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.CollectionAttribute.ElementConverterType">
            <summary>Gets or sets an element converter type.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.TermMappingAttribute">
            <summary>Base class for mapping attributes.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.TermMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.TermMappingAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="term">The term.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.TermMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.TermMappingAttribute"/> class.
            </summary>
            <param name="termUri">The term URI.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.TermMappingAttribute.Prefix">
            <summary>Gets the ontology prefix.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.TermMappingAttribute.Term">
            <summary>Gets the term name.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Attributes.TermMappingAttribute.Uri">
            <summary>
            Gets the URI.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.PropertyAttribute">
            <summary>Maps a property to an RDF predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.PropertyAttribute"/> class.</summary>
            <param name="prefix">The prefix.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.PropertyAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.PropertyAttribute"/> class.</summary>
            <param name="propertyUri">The property URI.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Attributes.ClassAttribute">
            <summary>Maps a type to an RDF class.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.ClassAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.ClassAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.ClassAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Attributes.ClassAttribute"/> class.
            </summary>
            <param name="classUri">The URI.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Attributes.ClassAttribute.Accept(RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns></returns>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention">
            <summary>Convention, which sets converter types based the property type.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention"/> class.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#IPropertyMappingProvider}#ShouldApply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#IPropertyMappingProvider}#Apply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#ICollectionMappingProvider}#ShouldApply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#ICollectionMappingProvider}#Apply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#IDictionaryMappingProvider}#ShouldApply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.RomanticWeb#Mapping#Conventions#IConvention{RomanticWeb#Mapping#Providers#IDictionaryMappingProvider}#Apply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.SetDefault``2">
            <summary>Sets a default converter for a given property type.</summary>
            <typeparam name="T">Typ of property</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultConvertersConvention.SetDefault``1(System.Type[])">
            <summary>Sets a default converter for multiple property <paramref name="types"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.EntityIdPropertiesConvention">
            <summary>Sets the converter of EntityId properties to an appropriate.<see cref="T:RomanticWeb.Converters.EntityIdConverter`1"/>
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.EntityIdPropertiesConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.EntityIdPropertiesConvention.ShouldApply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.EntityIdPropertiesConvention.Apply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.EntityPropertiesConvention">
            <summary>Sets the converter of <see cref="T:RomanticWeb.Entities.IEntity"/> properties to an appropriate.<see cref="T:RomanticWeb.Converters.AsEntityConverter`1"/>
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.EntityPropertiesConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.EntityPropertiesConvention.ShouldApply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.EntityPropertiesConvention.Apply(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.CollectionStorageConvention">
            <summary>Convention to ensure <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties are stored and read as RDF multi objects.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.CollectionStorageConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.CollectionStorageConvention.ShouldApply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.CollectionStorageConvention.Apply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.ConventionsVisitor">
            <summary>Visits mapping providers and applies conventions.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.#ctor(RomanticWeb.Mapping.MappingContext)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Conventions.ConventionsVisitor"/> class.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Requires">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Visit(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <summary>Applies property and collection conventions to <paramref name="collectionMappingProvider"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Visit(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <summary>Applies property conventions to <paramref name="propertyMappingProvider"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Visit(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <summary>Applies property and dictionary conventions to <paramref name="dictionaryMappingProvider"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Visit(RomanticWeb.Mapping.Providers.IClassMappingProvider)">
            <summary>Does nothing for now.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.ConventionsVisitor.Visit(RomanticWeb.Mapping.Providers.IEntityMappingProvider)">
            <summary>Does nothing for now.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.DefaultDictionaryKeyPredicateConvention">
            <summary>Convention to ensure <see cref="T:System.Collections.Generic.IDictionary`2"/> properties have the key predicate set.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.DefaultDictionaryKeyPredicateConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultDictionaryKeyPredicateConvention.ShouldApply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <inheritdoc/>
            <returns>true if <see cref="P:RomanticWeb.Mapping.Providers.IDictionaryMappingProvider.Key"/> doesn't map to a URI</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultDictionaryKeyPredicateConvention.Apply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <summary>Sets the key predicate to <see cref="F:RomanticWeb.Vocabularies.Rdf.predicate"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.DefaultDictionaryValuePredicateConvention">
            <summary>Convention to ensure <see cref="T:System.Collections.Generic.IDictionary`2"/> properties have the value predicate set.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.DefaultDictionaryValuePredicateConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultDictionaryValuePredicateConvention.ShouldApply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <inheritdoc/>
            <returns>true if <see cref="P:RomanticWeb.Mapping.Providers.IDictionaryMappingProvider.Value"/> doesn't map to a URI</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.DefaultDictionaryValuePredicateConvention.Apply(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <summary>Sets the key predicate to <see cref="F:RomanticWeb.Vocabularies.Rdf.object"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.ICollectionConvention">
            <summary>
            A contract for implementing collection conventions
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.IDictionaryConvention">
            <summary>
            A contract for implementing dictionary conventions
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.IPropertyConvention">
            <summary>
            A contract for implementing property conventions
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Conventions.RdfListConvention">
            <summary>Convention to ensure <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties are stored and read as rdf:List objects.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Conventions.RdfListConvention.Requires">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.RdfListConvention.ShouldApply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Conventions.RdfListConvention.Apply(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.IMappingFrom">
            <summary>Describes an abstract mapping source.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.IMappingFrom.FromAssemblyOf``1(RomanticWeb.Mapping.IMappingBuilder)">
            <summary>Instructs to gather mappings from the assembly containing a <typeparamref name="T" />.</summary>
            <typeparam name="T">Type that points to the target assembly to scan.</typeparam>
            <param name="builder">Target mapping builder.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.IMappingFrom.FromAssembly(RomanticWeb.Mapping.IMappingBuilder,System.Reflection.Assembly)">
            <summary>Instructs to gather mappings from the given <paramref name="assembly"/>.</summary>
            <param name="builder">Target mapping builder.</param>
            <param name="assembly">Target assembly to scan.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.IMappingBuilder">
            <summary>Descirbes a builder for registering mapping repositories with <see cref="T:RomanticWeb.IEntityContextFactory"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.IMappingBuilder.FromAssemblyOf``1">
            <summary>Registers both fluent and attrbiute mappings from an assembly.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.IMappingBuilder.FromAssembly(System.Reflection.Assembly)">
            <summary>Registers both fluent and attrbiute mappings from an assembly.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.IMappingBuilder.AddMapping``1(System.Reflection.Assembly,``0)">
            <summary>Adds a given mapping.</summary>
            <typeparam name="TMappingRepository">Type of the mapping repository.</typeparam>
            <param name="mappingAssembly">Source assembly.</param>
            <param name="mappingProvider">Mappings provider.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Model.IQueryableClassMapping">
            <summary>
            A <see cref="T:RomanticWeb.Mapping.Model.IClassMapping"/>, which affects how an entity is queried
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Model.IQueryableClassMapping.Uris">
            <summary>
            Gets the URIs to query for.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IPredicateMappingProvider">
            <summary>
            A mapping provider, which provides a predicate mapping
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IPredicateMappingProvider.ConverterType">
            <summary> Gets or sets the type of the converter.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.ClassMappingProvider">
            <summary>Mapping provider for RDF class.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ClassMappingProvider.#ctor(System.Type,System.Uri,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.ClassMappingProvider" /> class.</summary>
            <param name="entityType">Type of the entity.</param>
            <param name="uri">The URI.</param>
            <param name="log">Logging facility</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ClassMappingProvider.#ctor(System.Type,System.String,System.String,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.ClassMappingProvider" /> class.</summary>
            <param name="entityType">Type of the entity.</param>
            <param name="prefix">The QName prefix.</param>
            <param name="term">The QName term.</param>
            <param name="log">Logging facility</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.ClassMappingProvider.DeclaringEntityType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ClassMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ClassMappingProvider.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.CollectionMappingProvider">
            <summary>Mapping provider, which returns a mapping for collection property predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.CollectionMappingProvider.#ctor(RomanticWeb.Mapping.Providers.IPropertyMappingProvider,RomanticWeb.Mapping.Model.StoreAs)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.CollectionMappingProvider" /> class.</summary>
            <param name="propertyMapping">The property mapping.</param>
            <param name="storeAs">The storage strategy.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.CollectionMappingProvider.GetTerm">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.CollectionMappingProvider.PropertyInfo">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.CollectionMappingProvider.ConverterType">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.CollectionMappingProvider.RomanticWeb#Mapping#Providers#ICollectionMappingProvider#StoreAs">
            <summary>Gets or sets the storage strategy.</summary>
            <remarks>Setting this updated the <see cref="T:RomanticWeb.Entities.ResultAggregations.Aggregation"/> property.</remarks>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.CollectionMappingProvider.ElementConverterType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.CollectionMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.CollectionMappingProvider.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.DictionaryMappingProvider">
            <summary>Mapping provider, which returns a mapping for dictionary property predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.#ctor(RomanticWeb.Mapping.Providers.IPropertyMappingProvider,RomanticWeb.Mapping.Providers.IPredicateMappingProvider,RomanticWeb.Mapping.Providers.IPredicateMappingProvider)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.DictionaryMappingProvider"/> class.</summary>
            <param name="key">The key mapping provider.</param>
            <param name="value">The value mapping provider.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.Key">
            <summary>Gets the key mapping provider.</summary>
            <value>The key mapping provider.</value>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.Value">
            <summary>Gets the value mapping provider.</summary>
            <value>The value mapping provider.</value>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.GetTerm">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.ConverterType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <inheridoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.DictionaryMappingProvider.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IClassMappingProvider">
            <summary>
            Provides class mappings
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IClassMappingProvider.DeclaringEntityType">
            <summary>
            Gets the type, where this class was declared.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.ICollectionMappingProvider">
            <summary>Provides collection mapping.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.ICollectionMappingProvider.StoreAs">
            <summary>Gets or sets the storage strategy.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.ICollectionMappingProvider.ElementConverterType">
            <summary>Gets or sets an element converter type.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IDictionaryMappingProvider">
            <summary>
            Provides dictionary mappings
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IDictionaryMappingProvider.Key">
            <summary>
            Gets the key mapping provider.
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IDictionaryMappingProvider.Value">
            <summary>
            Gets the value mapping provider.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IEntityMappingProvider">
            <summary>
            A <see cref="T:RomanticWeb.Mapping.Providers.IMappingProvider"/>, which provides an entity mapping
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IEntityMappingProvider.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IEntityMappingProvider.Classes">
            <summary>
            Gets the class mapping providers.
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IEntityMappingProvider.Properties">
            <summary>
            Gets the properties mapping providers.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IMappingProvider">
            <summary>
            Mapping provider
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.IMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <summary>
            Accepts the specified mapping provider visitor.
            </summary>
            <param name="mappingProviderVisitor">The mapping provider visitor.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.IPropertyMappingProvider">
            <summary>Provides property mapping.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.IPropertyMappingProvider.PropertyInfo">
            <summary>Gets the mapped property.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.ITermMappingProvider">
            <summary>
            A <see cref="T:RomanticWeb.Mapping.Providers.IMappingProvider"/>, which provides a term mapping
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.ITermMappingProvider.GetTerm">
            <summary>
            Gets or sets the factory method for resolving the mapped term.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.KeyMappingProvider">
            <summary>
            Mapping provider, which returns a mapping for dictionary key predicate
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.KeyMappingProvider.#ctor(System.Uri,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.KeyMappingProvider"/> class.</summary>
            <param name="termUri">The term URI.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.KeyMappingProvider.#ctor(System.String,System.String,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.KeyMappingProvider"/> class.</summary>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="term">The term.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.KeyMappingProvider.#ctor(RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes an empty <see cref="T:RomanticWeb.Mapping.Providers.KeyMappingProvider"/>.</summary>
            <param name="log">Logging facility.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.KeyMappingProvider.ConverterType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.KeyMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <summary>Does nothing.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.PropertyMappingProvider">
            <summary>Mapping provider, which returns a mapping for property predicate.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.PropertyMappingProvider.#ctor(System.Uri,System.Reflection.PropertyInfo,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.PropertyMappingProvider"/> class.</summary>
            <param name="termUri">The term URI.</param>
            <param name="property">The property.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.PropertyMappingProvider.#ctor(System.String,System.String,System.Reflection.PropertyInfo,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.PropertyMappingProvider"/> class.</summary>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="term">The term.</param>
            <param name="property">The property.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.PropertyMappingProvider.PropertyInfo">
            <summary>Gets the property.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.PropertyMappingProvider.ConverterType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.PropertyMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.TermMappingProviderBase">
            <summary>Base class for mapping providers, which return a RDF term mapping.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.TermMappingProviderBase.#ctor(System.Uri,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.TermMappingProviderBase"/> class.</summary>
            <param name="termUri">The term URI.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.TermMappingProviderBase.#ctor(System.String,System.String,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.TermMappingProviderBase"/> class.</summary>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="term">The term.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.TermMappingProviderBase.#ctor(RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes an empty <see cref="T:RomanticWeb.Mapping.Providers.TermMappingProviderBase"/>.</summary>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.TermMappingProviderBase.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="mappingProviderVisitor">The visitor.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Providers.ValueMappingProvider">
            <summary>Mapping provider, which returns a mapping for dictionary value property.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ValueMappingProvider.#ctor(System.Uri,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.ValueMappingProvider"/> class.</summary>
            <param name="termUri">The term URI.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ValueMappingProvider.#ctor(System.String,System.String,RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Providers.ValueMappingProvider"/> class.</summary>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="term">The term.</param>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ValueMappingProvider.#ctor(RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes an empty <see cref="T:RomanticWeb.Mapping.Providers.ValueMappingProvider"/>.</summary>
            <param name="log">Logging facility.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Providers.ValueMappingProvider.ConverterType">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.Providers.ValueMappingProvider.Accept(RomanticWeb.Mapping.Visitors.IMappingProviderVisitor)">
            <summary>Does nothing.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.RdfTypeCache">
            <summary>
            Implementation of <see cref="T:RomanticWeb.Mapping.IRdfTypeCache"/>, 
            which built by visiting <see cref="T:RomanticWeb.Mapping.Model.IEntityMapping"/>s
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.RdfTypeCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.RdfTypeCache"/> class.
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.RdfTypeCache.GetMostDerivedMappedTypes(System.Collections.Generic.IEnumerable{System.Uri},System.Type)">
            <inheridoc/>
        </member>
        <member name="M:RomanticWeb.Mapping.RdfTypeCache.Add(System.Type,System.Collections.Generic.IList{RomanticWeb.Mapping.Model.IClassMapping})">
            <inheridoc/>
        </member>
        <member name="T:RomanticWeb.Mapping.IRdfTypeCache">
            <summary>
            Defines contract for classes, which aggregate information about mapped RDF types
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.IRdfTypeCache.GetMostDerivedMappedTypes(System.Collections.Generic.IEnumerable{System.Uri},System.Type)">
            <summary>
            Gets the type of the most derived mapped.
            </summary>
            <param name="entityTypes"><see cref="T:System.Uri"/>s of types of given entity.</param>
            <param name="requestedType">Requested <see cref="T:RomanticWeb.Entities.IEntity"/> type.</param>
            <returns>the <paramref name="requestedType"/> or a type derived from it</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.IRdfTypeCache.Add(System.Type,System.Collections.Generic.IList{RomanticWeb.Mapping.Model.IClassMapping})">
            <summary>
            Adds a type to the cache
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.MappingBuilder">
            <summary>Builder for registering mapping repositories with <see cref="T:RomanticWeb.IEntityContextFactory"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingBuilder.#ctor(System.Collections.Generic.IEnumerable{RomanticWeb.Mapping.IMappingFrom})">
            <summary>Initializes a new instance if the <see cref="T:RomanticWeb.Mapping.MappingBuilder" /> class.</summary>
            <param name="mappingFrom">Registered mapping sources.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingBuilder.FromAssemblyOf``1">
            <summary>Registers both fluent and attrbiute mappings from an assembly.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingBuilder.FromAssembly(System.Reflection.Assembly)">
            <summary>Registers both fluent and attrbiute mappings from an assembly.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingBuilder.AddMapping``1(System.Reflection.Assembly,``0)">
            <summary>Adds a given mapping.</summary>
            <typeparam name="TMappingRepository">Type of the mapping repository.</typeparam>
            <param name="mappingAssembly">Source assembly.</param>
            <param name="mappingProvider">Mappings provider.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.MappingFrom">
            <summary>Implement to allow adding custom mapping repositories to <see cref="T:RomanticWeb.IEntityContextFactory"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFrom.#ctor(RomanticWeb.Mapping.MappingBuilder)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.MappingFrom"/> class.</summary>
            <param name="mappingBuilder">The mapping builder.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.MappingFrom.MappingBuilder">
            <summary>Gets the mapping builder.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFrom.FromAssembly(System.Reflection.Assembly)">
            <summary>Registers a mapping repository, which will look for mappings in the given <see cref="T:System.Reflection.Assembly"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFrom.FromAssemblyOf``1">
            <summary>Registers a mapping repository, which will look for mappings in the <see cref="T:System.Reflection.Assembly"/> of the given entity type.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFromAttributes.#ctor(RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.MappingFromAttributes" /> class.</summary>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFromAttributes.FromAssemblyOf``1(RomanticWeb.Mapping.IMappingBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.MappingFromAttributes.FromAssembly(RomanticWeb.Mapping.IMappingBuilder,System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Mapping.Extensions">
            <summary>Provides useful mappings repository extension methods.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindMappedClasses(RomanticWeb.Mapping.IMappingsRepository,System.Type)">
            <summary>Searches for class mappings.</summary>
            <param name="mappingsRepository">Repository to be queried.</param>
            <param name="type">Type of entity.</param>
            <returns>Class mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindMappedClasses``1(RomanticWeb.Mapping.IMappingsRepository)">
            <summary>Searches for class mappings.</summary>
            <param name="mappingsRepository">Repository to be queried.</param>
            <typeparam name="T">Type of entity.</typeparam>
            <returns>Class mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindPropertyMapping``1(RomanticWeb.Mapping.IMappingsRepository,System.String)">
            <summary>Searches for property mappings.</summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="mappingsRepository">Repository to be queried.</param>
            <param name="propertyName">Property name to be searched for.</param>
            <returns>Property mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindPropertyMapping(RomanticWeb.Mapping.IMappingsRepository,System.Reflection.PropertyInfo)">
            <summary>Searches for property mappings.</summary>
            <param name="mappingsRepository">Repository to be queried.</param>
            <param name="property">Property to be searched for.</param>
            <returns>Property mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindPropertyMapping(RomanticWeb.Mapping.IMappingsRepository,System.Type,System.String)">
            <summary>Searches for property mappings.</summary>
            <param name="mappingsRepository">Repository to be queried.</param>
            <param name="declaringType">Type of entity.</param>
            <param name="propertyName">Property name to be searched for.</param>
            <returns>Property mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindEntityMapping(RomanticWeb.Mapping.IMappingsRepository,System.Type)">
            <summary>Searches for entity mappings.</summary>
            <param name="mappingsRepository">Repository to be queried.</param>
            <param name="type">Type of entity.</param>
            <returns>Entity mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindEntityMapping``1(RomanticWeb.Mapping.IMappingsRepository)">
            <summary>Searches for entity mappings.</summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="mappingsRepository">Repository to be queried.</param>
            <returns>Entity mapping or null.</returns>
        </member>
        <member name="M:RomanticWeb.Mapping.Extensions.FindEntityType(System.Type)">
            <summary>Searches for IEntity based type.</summary>
            <param name="type">Type to be searched through.</param>
            <returns><see cref="T:RomanticWeb.Entities.IEntity" /> based type or <b>null</b>.</returns>
        </member>
        <member name="T:RomanticWeb.Mapping.MappingsRepository">
            <summary>Default implementation of <see cref="T:RomanticWeb.Mapping.IMappingsRepository"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingsRepository.MappingFor``1">
            <summary>Gets a mapping for an Entity type.</summary>
            <typeparam name="TEntity">Entity type, for which mappings is going to be retrieved.</typeparam>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingsRepository.MappingFor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.MappingsRepository.MappingForProperty(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.MappingsRepository.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.MappingsRepository.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Mapping.Sources.InternalsMappingsSource">
            <summary>Mappings repository, which generates mappings for some internal types.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.InternalsMappingsSource.#ctor(System.Reflection.Assembly)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Mapping.Sources.AttributeMappingsSource"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Sources.InternalsMappingsSource.Description">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.InternalsMappingsSource.GetMappingProviders">
            <summary>Create mapping propviders from mapping attributes.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Sources.AssemblyMappingsSource">
            <summary>Base class for implementations of <see cref="T:RomanticWeb.Mapping.Sources.IMappingProviderSource" />, which scan an <see cref="P:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.Assembly" />.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.#ctor(System.Reflection.Assembly)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Sources.AssemblyMappingsSource"/> class.</summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.Description">
            <inheritdoc />
        </member>
        <member name="P:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.Assembly">
            <summary>Gets the source <see cref="T:System.Reflection.Assembly"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.GetMappingProviders">
            <summary>Gets the mapping providers from the <see cref="P:RomanticWeb.Mapping.Sources.AssemblyMappingsSource.Assembly"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Sources.AttributeMappingsSource">
            <summary>Mappings repository, which reads mapping attributes from an assembly.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.AttributeMappingsSource.#ctor(System.Reflection.Assembly,RomanticWeb.Diagnostics.ILogger)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Mapping.Sources.AttributeMappingsSource"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Sources.AttributeMappingsSource.Description">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.AttributeMappingsSource.GetMappingProviders">
            <summary>Create mapping propviders from mapping attributes.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Sources.IMappingProviderSource">
            <summary>Source for mapping providers.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.Sources.IMappingProviderSource.Description">
            <summary>Gets a textual description of the mapping source.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Sources.IMappingProviderSource.GetMappingProviders">
            <summary>Gets the mapping providers.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.RdfTypeCacheBuilder.Visit(RomanticWeb.Mapping.Model.IEntityMapping)">
            <summary>
            Sets the currently processed enitty type
            and updates inheritance cache
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.RdfTypeCacheBuilder.Visit(RomanticWeb.Mapping.Model.ICollectionMapping)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.RdfTypeCacheBuilder.Visit(RomanticWeb.Mapping.Model.IDictionaryMapping)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.RdfTypeCacheBuilder.Visit(RomanticWeb.Mapping.Model.IPropertyMapping)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.RdfTypeCacheBuilder.Visit(RomanticWeb.Mapping.Model.IClassMapping)">
            <summary>
            Adds class URI to the current entity's list
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor">
            <summary>
            Visits mapping attributes and produces mapping providers
            </summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.ClassAttribute)">
            <summary>
            Visits the specified attribute.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.PropertyAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Visits the specified property attribute.
            </summary>
            <param name="propertyAttribute">The property attribute.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.CollectionAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Visits the specified collection attribute.
            </summary>
            <param name="collectionAttribute">The collection attribute.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.DictionaryAttribute,System.Reflection.PropertyInfo,RomanticWeb.Mapping.Providers.IPredicateMappingProvider,RomanticWeb.Mapping.Providers.IPredicateMappingProvider)">
            <summary>
            Visits the specified dictionary attribute.
            </summary>
            <param name="dictionaryAttribute">The dictionary attribute.</param>
            <param name="property">The property.</param>
            <param name="key">The key property mapping provider.</param>
            <param name="value">The value property mapping provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.KeyAttribute)">
            <summary>
            Visits the specified key attribute.
            </summary>
            <param name="keyAttribute">The key attribute.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingAttributesVisitor.Visit(RomanticWeb.Mapping.Attributes.ValueAttribute)">
            <summary>
            Visits the specified value attribute.
            </summary>
            <param name="valueAttribute">The value attribute.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor">
            <summary>Contract for implementing visitors of mapping providers.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor.Visit(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <summary>Visits the specified collection mapping provider.</summary>
            <param name="collectionMappingProvider">The collection mapping provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor.Visit(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <summary>Visits the specified property mapping provider.</summary>
            <param name="propertyMappingProvider">The property mapping provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor.Visit(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <summary>Visits the specified dictionary mapping provider.</summary>
            <param name="dictionaryMappingProvider">The dictionary mapping provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor.Visit(RomanticWeb.Mapping.Providers.IClassMappingProvider)">
            <summary>Visits the specified class mapping provider.</summary>
            <param name="classMappingProvider">The class mapping provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Visitors.IMappingProviderVisitor.Visit(RomanticWeb.Mapping.Providers.IEntityMappingProvider)">
            <summary>Visits the specified entity mapping provider.</summary>
            <param name="entityMappingProvider">The entity mapping provider.</param>
        </member>
        <member name="T:RomanticWeb.Mapping.Validation.MappingProvidersValidator">
            <summary>A visitor, which executes validation logic on mapping providers.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.#ctor(RomanticWeb.Diagnostics.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Mapping.Validation.MappingProvidersValidator" /> class.</summary>
            <param name="log">Logging facility.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.Visit(RomanticWeb.Mapping.Providers.ICollectionMappingProvider)">
            <summary>Validates the specified collection mapping provider.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.Visit(RomanticWeb.Mapping.Providers.IPropertyMappingProvider)">
            <summary>Validates the specified property mapping provider.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.Visit(RomanticWeb.Mapping.Providers.IDictionaryMappingProvider)">
            <summary>Validates the specified dictionary mapping provider.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.Visit(RomanticWeb.Mapping.Providers.IClassMappingProvider)">
            <summary>Validates the specified class mapping provider.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.Validation.MappingProvidersValidator.Visit(RomanticWeb.Mapping.Providers.IEntityMappingProvider)">
            <summary>Validates the specified entity mapping provider.</summary>
        </member>
        <member name="T:RomanticWeb.Mapping.MappingContext">
            <summary>Provides a mapping context.</summary>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingContext.#ctor(RomanticWeb.Ontologies.IOntologyProvider)">
            <summary>Default constructor with ontology provider and default graph selector passed.</summary>
            <param name="ontologyProvider">Ontology provider.</param>
        </member>
        <member name="M:RomanticWeb.Mapping.MappingContext.#ctor(RomanticWeb.Ontologies.IOntologyProvider,System.Collections.Generic.IEnumerable{RomanticWeb.Mapping.Conventions.IConvention})">
            <summary>Default constructor with ontology provider and default graph selector passed.</summary>
            <param name="ontologyProvider">Ontology provider.</param>
            <param name="conventions"></param>
        </member>
        <member name="P:RomanticWeb.Mapping.MappingContext.OntologyProvider">
            <summary>Gets the ontology provider.</summary>
        </member>
        <member name="P:RomanticWeb.Mapping.MappingContext.Conventions">
            <summary>
            Gets the conventions.
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.MappingException">
            <summary>
            Represents error with entity mapping
            </summary>
        </member>
        <member name="T:RomanticWeb.Mapping.UnMappedTypeException">
            <summary>
            Represents errors, which occur when an entity type is unmapped
            </summary>
        </member>
        <member name="P:RomanticWeb.Mapping.UnMappedTypeException.Type">
            <summary>
            The type which wasn't found in the mapping repositories
            </summary>
        </member>
        <member name="T:RomanticWeb.Model.EntityQuad">
            <summary>Represents a triple (subject, predicate, object).</summary>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.Model.ITriple)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Model.EntityQuad"/> from given <see cref="T:RomanticWeb.Model.ITriple"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.Model.INode,RomanticWeb.Model.INode,RomanticWeb.Model.INode,RomanticWeb.Model.INode)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Model.EntityQuad"/> in named graph.</summary>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.Model.INode,RomanticWeb.Model.INode,RomanticWeb.Model.INode)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Model.EntityQuad"/> in default graph.</summary>
        </member>
        <member name="P:RomanticWeb.Model.EntityQuad.Graph">
            <summary>Gets the named graph node or null, if triple is in named graph.</summary>
        </member>
        <member name="P:RomanticWeb.Model.EntityQuad.EntityId">
            <summary>Gets entity id, which defines this triple.</summary>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.Uri)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="o">Object <see cref="T:System.Uri" />.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.Object)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.String)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.Int32)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.Single)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.Boolean)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.String,System.Uri)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <param name="dataType">Optional Uri of the datatype of the value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.For(RomanticWeb.Entities.EntityId,System.Uri,System.Uri,System.String,System.String)">
            <summary>Creates a quad.</summary>
            <param name="entityId">Entity identifier.</param>
            <param name="s">Sbject <see cref="T:System.Uri" />.</param>
            <param name="p">Predicate <see cref="T:System.Uri" />.</param>
            <param name="value">Value.</param>
            <param name="language">Language of the value.</param>
            <returns><see cref="T:RomanticWeb.Model.EntityQuad" /> created.</returns>
        </member>
        <member name="M:RomanticWeb.Model.EntityQuad.ToString(System.Boolean)">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <param name="nQuadFormat">if set to <c>true</c> the string will be a valid NQuad.</param>
        </member>
        <member name="T:RomanticWeb.Model.Node">
            <summary>Represents an RDF node (URI or literal).</summary>
            <remarks>Blank nodes are not supported currently.</remarks>
        </member>
        <member name="F:RomanticWeb.Model.Node.A">
            <summary>Gets a reference for node with rdf:type predicate usually shortened in Turtle syntax to 'a'.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Node.IsUri">
            <summary>Gets the value indicating that the node is a URI.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Node.IsLiteral">
            <summary>Gets the value indicating that the node is a literal.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Node.IsBlank">
            <summary>Gets the value indicating that the node is a blank node.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Node.Uri">
            <summary>Gets the URI of a URI node.</summary>
            <exception cref="T:System.InvalidOperationException">thrown when node is a literal.</exception>
        </member>
        <member name="P:RomanticWeb.Model.Node.Literal">
            <summary>Gets the string value of a literal node.</summary>
            <exception cref="T:System.InvalidOperationException">thrown when node is URI.</exception>
        </member>
        <member name="P:RomanticWeb.Model.Node.BlankNode">
            <summary>Gets the string value of a blank node.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Node.DataType">
            <summary>Gets the data type of a literal node.</summary>
            <exception cref="T:System.InvalidOperationException">thrown when node is URI.</exception>
        </member>
        <member name="P:RomanticWeb.Model.Node.Language">
            <summary>Gets the language tag of a literal node.</summary>
            <exception cref="T:System.InvalidOperationException">thrown when node is URI.</exception>
        </member>
        <member name="M:RomanticWeb.Model.Node.ForUri(System.Uri)">
            <summary>Factory method for creating URI nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.ForLiteral(System.String)">
            <summary>Factory method for creating simple literal nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.ForLiteral(System.String,System.Uri)">
            <summary>Factory method for creating typed literal nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.ForLiteral(System.String,System.String)">
            <summary>Factory method for creating literal nodes with language tag.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.ForBlank(System.String,RomanticWeb.Entities.EntityId,System.Uri)">
            <summary>Factory method for creating blank nodes.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.FromEntityId(RomanticWeb.Entities.EntityId)">
            <summary>Factory method for creating nodes from <see cref="T:RomanticWeb.Entities.EntityId"/>.</summary>
            <returns>A URI node or a Blank Node</returns>
        </member>
        <member name="M:RomanticWeb.Model.Node.Equals(System.Object)">
            <summary>Determines whether the specified System.Object is equal to the current node.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.GetHashCode">
            <summary>Gets hash code for the node.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Node.ToString">
            <summary>Gets the string representation of a node.</summary>
            <returns>Literal value or URI for literal and URI nodes respectively</returns>
        </member>
        <member name="M:RomanticWeb.Model.Node.ToString(System.Boolean)">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <param name="nQuadFormat">if set to <c>true</c> the string will be a valid NQuad node.</param>
        </member>
        <member name="M:RomanticWeb.Model.Node.ToEntityId">
            <summary>Creates an <see cref="T:RomanticWeb.Entities.EntityId"/> for a <see cref="T:RomanticWeb.Model.Node"/>.</summary>
        </member>
        <member name="T:RomanticWeb.Model.Triple">
            <summary>Reprents a triple, which does nto belong to a graph.</summary>
        </member>
        <member name="M:RomanticWeb.Model.Triple.#ctor(RomanticWeb.Model.INode,RomanticWeb.Model.INode,RomanticWeb.Model.INode)">
            <summary>Creates a new triple. </summary>
            <param name="s">Subject.</param>
            <param name="p">Predicate.</param>
            <param name="o">Object.</param>
        </member>
        <member name="P:RomanticWeb.Model.Triple.Object">
            <summary>Gets the triple's object.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Triple.Predicate">
            <summary>Gets the triple's predicate.</summary>
        </member>
        <member name="P:RomanticWeb.Model.Triple.Subject">
            <summary>Gets the triple's subject.</summary>
        </member>
        <member name="T:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector">
            <summary>Provides a named graph according to given base uris.</summary>
            <remarks>This selector should be used for read-only graph per multiple resources scenario.</remarks>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector.#ctor(System.Uri[])">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector" /> class.</summary>
            <param name="baseUris">Base uris.</param>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector" /> class.</summary>
            <param name="baseUris">Base uris.</param>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.BaseUriNamedGraphSelector.GetGraphForEntityId(RomanticWeb.Entities.EntityId,RomanticWeb.Mapping.Model.IEntityMapping,RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.NamedGraphs.GraphSelectionStrategyBase">
            <summary>Defines method for selecting named graph URI based on <see cref="T:RomanticWeb.Entities.EntityId"/>.</summary>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.GraphSelectionStrategyBase.RomanticWeb#NamedGraphs#INamedGraphSelector#SelectGraph(RomanticWeb.Entities.EntityId,RomanticWeb.Mapping.Model.IEntityMapping,RomanticWeb.Mapping.Model.IPropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.NamedGraphs.GraphSelectionStrategyBase.GetGraphForEntityId(RomanticWeb.Entities.EntityId,RomanticWeb.Mapping.Model.IEntityMapping,RomanticWeb.Mapping.Model.IPropertyMapping)">
            <summary>Gets a named graph URI for a given entity.</summary>
            <param name="entityId">The entity identifier.</param>
            <param name="entityMapping">The entity mapping.</param>
            <param name="predicate">The predicate.</param>
            <returns>In implementing classes returns an absolute <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:RomanticWeb.NamedGraphs.MatchResult">
            <summary>Enumerates possible graph match results.</summary>
        </member>
        <member name="F:RomanticWeb.NamedGraphs.MatchResult.NoMatch">
            <summary>Indiceates that there was no match.</summary>
        </member>
        <member name="F:RomanticWeb.NamedGraphs.MatchResult.ExactMatch">
            <summary>Indicates that there was an exact match.</summary>
        </member>
        <member name="F:RomanticWeb.NamedGraphs.MatchResult.PartialMatch">
            <summary>Indicates that there was a partial match.</summary>
        </member>
        <member name="F:RomanticWeb.NamedGraphs.MatchResult.DontCare">
            <summary>Indicates that the implementour don't care about given match.</summary>
        </member>
        <member name="T:RomanticWeb.NamedGraphs.NamedGraphMatch">
            <summary>Carries information on given graph match.</summary>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.NamedGraphMatch.#ctor(System.Uri,RomanticWeb.NamedGraphs.MatchResult,RomanticWeb.NamedGraphs.MatchResult,RomanticWeb.NamedGraphs.MatchResult)">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.NamedGraphs.NamedGraphMatch"/>.</summary>
            <param name="namedGraph"><see cref="T:System.Uri"/> of the named graph.</param>
            <param name="idMatch">Match for entity identifiers.</param>
            <param name="predicateMatch">Match for predicates.</param>
            <param name="typeMatch">Match for types.</param>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.NamedGraphMatch.NamedGraph">
            <summary>Gets an <see cref="T:System.Uri"/> of the named graph.</summary>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.NamedGraphMatch.IdMatch">
            <summary>Gets a match for entity identifiers.</summary>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.NamedGraphMatch.PredicateMatch">
            <summary>Gets a match for predicates.</summary>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.NamedGraphMatch.TypeMatch">
            <summary>Gets a match for types.</summary>
        </member>
        <member name="T:RomanticWeb.NamedGraphs.OverridingGraphSelector">
            <summary>Provides a basic default graph selection overriding mechanism.</summary>
        </member>
        <member name="M:RomanticWeb.NamedGraphs.OverridingGraphSelector.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.Mapping.Model.IEntityMapping,RomanticWeb.Mapping.Model.IPropertyMapping)">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.NamedGraphs.OverridingGraphSelector"/>.</summary>
            <param name="entityId">Target entity identifier.</param>
            <param name="entityMapping">Target entity mapping.</param>
            <param name="propertyMapping">Target property mapping</param>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.OverridingGraphSelector.SelectGraph">
            <summary>Gets the selected graph.</summary>
        </member>
        <member name="T:RomanticWeb.NamedGraphs.UnionGraphSelector">
            <summary>
            An implementation of <see cref="T:RomanticWeb.NamedGraphs.ISourceGraphSelectionOverride"/>, 
            which will cause the default graph to be used
            </summary>
        </member>
        <member name="P:RomanticWeb.NamedGraphs.UnionGraphSelector.SelectGraph">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.IO.ContentTypeResolver">
            <summary>Provides a main source of the content type resolution infrastructure.</summary>
        </member>
        <member name="M:RomanticWeb.IO.ContentTypeResolver.#ctor(System.Collections.Generic.IEnumerable{RomanticWeb.IO.IContentTypeResolver})">
            <summary>Creates an instance of the <see cref="T:RomanticWeb.IO.ContentTypeResolver" />.</summary>
            <param name="contentTypeResolvers">Implemenations of content type resolvers that can analyze a stream for possible content types.</param>
        </member>
        <member name="M:RomanticWeb.IO.ContentTypeResolver.Resolve(System.Uri,System.Net.WebResponse)">
            <summary>Resolves a MIME type of the given content.</summary>
            <param name="uri">Original Uri of the content.</param>
            <param name="response">Response object containing content stream.</param>
            <returns>String representing a MIME type of the given content.</returns>
        </member>
        <member name="T:RomanticWeb.IO.FileExtensionContentTypeResolver">
            <summary>Assigns a MIME type for a known file type extension.</summary>
        </member>
        <member name="M:RomanticWeb.IO.FileExtensionContentTypeResolver.Resolve(System.Uri,System.Net.WebResponse)">
            <summary>Resolves a MIME type of the given content.</summary>
            <param name="uri">Original Uri of the content.</param>
            <param name="response">Response object containing content stream.</param>
            <returns>String representing a MIME type of the given content.</returns>
        </member>
        <member name="T:RomanticWeb.IO.HeadersContentTypeResolver">
            <summary>Retrieves a content type from the response headers if possible.</summary>
        </member>
        <member name="M:RomanticWeb.IO.HeadersContentTypeResolver.Resolve(System.Uri,System.Net.WebResponse)">
            <summary>Resolves a MIME type of the given content.</summary>
            <param name="uri">Original Uri of the content.</param>
            <param name="response">Response object containing content stream.</param>
            <returns>String representing a MIME type of the given content.</returns>
        </member>
        <member name="T:RomanticWeb.IO.IContentTypeResolver">
            <summary>Provides an unified base infrastructure for resolving content type.</summary>
        </member>
        <member name="M:RomanticWeb.IO.IContentTypeResolver.Resolve(System.Uri,System.Net.WebResponse)">
            <summary>Resolves a MIME type of the given content.</summary>
            <param name="uri">Original Uri of the content.</param>
            <param name="response">Response object containing content stream.</param>
            <returns>String representing a MIME type of the given content.</returns>
        </member>
        <member name="T:RomanticWeb.Net.StreamWebResponse">
            <summary>Mimics a <see cref="T:System.Net.WebResponse"/> like access to assembly embedded resources.</summary>
        </member>
        <member name="P:RomanticWeb.Net.StreamWebResponse.ResponseUri">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Net.StreamWebResponse.GetResponseStream">
            <summary>Gets a response stream with an embedded resource stream.</summary>
            <returns>An embedded resource stream.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.Class">
            <summary>Represents an RDF class.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.Class.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:RomanticWeb.Ontologies.Class"/>.</summary>
            <param name="className">Name of the class.</param>
        </member>
        <member name="T:RomanticWeb.Ontologies.CompoundOntologyProvider">
            <summary>Provides a base functionality for compoung ontology providers.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.CompoundOntologyProvider.Ontologies">
            <summary>Get ontologies' metadata.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.CompoundOntologyProvider.OntologyProviders">
            <summary>Gets a list of ontology proiders stored by this provider.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.CompoundOntologyProvider.ResolveUri(System.String,System.String)">
            <summary>Gets a URI from a QName.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.CompoundOntologyProvider.BuildOntologyProviders">
            <summary>Builds lazily an enumeration of ontology providers.</summary>
            <returns>Enumeration of ontology providers.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.DatatypeProperty">
            <summary>
            An Datatype property as defined in the OWL standard
            </summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.DatatypeProperty.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RomanticWeb.Ontologies.DatatypeProperty"/>
            </summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.DatatypeProperty.ToString">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Ontologies.BuiltInOntologies">
            <summary>Enumerates all built in ontologies.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.RDF">
            <summary>Points to an Resource Description Framework ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.RDFS">
            <summary>Points to an RDF Schema ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.OWL">
            <summary>Points to a Web Ontology Language ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.SKOS">
            <summary>Points to a Simple Knowledge Organization System ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.DC">
            <summary>Points to a Dublin Core ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.DCTerms">
            <summary>Points to a Dublin Core Terms ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.DCAM">
            <summary>Points to a Dublin Core Abstract Model ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.DCMIType">
            <summary>Points to a Dublin Core Metadata Initiatie Type vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.FOAF">
            <summary>Points to a Friend of a Friend vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.Schema">
            <summary>Points to a Schema.org vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.GR">
            <summary>Points to a GoodRelations ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.SIOC">
            <summary>Points to a Semantically-Interlinked Online Communities ontology.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.GEO">
            <summary>Points to a WGS84 Geo Positioning: an RDF vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.LDP">
            <summary>Points to the W3C Linked Data Platform vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.CNT">
            <summary>Points to the W3C content description vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.SPIN">
            <summary>Points to the SPIN Modeling Vocabulary.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.BuiltInOntologies.SP">
            <summary>Points to the SPIN SPARQL Syntax.</summary>
        </member>
        <member name="T:RomanticWeb.Ontologies.DefaultOntologiesProvider">
            <summary>Provides default, built in ontologies.</summary>
        </member>
        <member name="F:RomanticWeb.Ontologies.DefaultOntologiesProvider.OwlSerializationExtensions">
            <summary>Provides map of supported OWL serialization and their file extensions.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.#ctor">
            <summary>Creates a default ontology provider with all built in ontologies.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.#ctor(RomanticWeb.Ontologies.BuiltInOntologies)">
            <summary>Creates a default ontology provider with given built in ontologies initialized.</summary>
            <param name="ontologies">Ontologies to be included int this instance.</param>
        </member>
        <member name="P:RomanticWeb.Ontologies.DefaultOntologiesProvider.Ontologies">
            <summary>Get ontologies' metadata.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.Include(RomanticWeb.Ontologies.BuiltInOntologies)">
            <summary>Adds another built in ontology into this provider instance.</summary>
            <param name="ontologies">Ontologiesto be included in this instance.</param>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithRDF">
            <summary>Includes an Resource Description Framework ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithRDFS">
            <summary>Includes an RDF Schema ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithOWL">
            <summary>Includes a Web Ontology Language ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithSKOS">
            <summary>Includes a Simple Knowledge Organization System ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithDC">
            <summary>Includes a Dublin Core ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithDCTerms">
            <summary>Includes a Dublin Core Terms ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithDCAM">
            <summary>Includes a Dublin Core Abstraction Model ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithDCMIType">
            <summary>Includes a Dublin Core Metadata Initiative Type vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithFOAF">
            <summary>Includes a Friend of a Friend vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithSchema">
            <summary>Includes a Schema.org vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithGR">
            <summary>Includes a GoodRelations ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithSIOC">
            <summary>Includes a Semantically-Interlinked Online Communities ontology.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithGEO">
            <summary>Includes a WGS84 Geo Positioning: an RDF vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithLDP">
            <summary>Includes the W3C Linked Data Platform vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithCNT">
            <summary>Includes the W3C content description vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithSPIN">
            <summary>Includes the SPIN Modeling Vocabulary.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.DefaultOntologiesProvider.WithSP">
            <summary>Includes the SPIN SPARQL Syntax.</summary>
            <returns>This instance of the default ontologies provider.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.IOntologyLoader">
            <summary>Provides a base interface for ontology factories.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.IOntologyLoader.Accepts">
            <summary>Gets an array of accepted MIME types.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.IOntologyLoader.Create(System.IO.Stream)">
            <summary>Creates an ontology from given stream.</summary>
            <param name="fileStream">Stream containing a serialized ontology data.</param>
            <returns>Ontology beeing an object representation of given data.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.NamespaceSpecification">
            <summary>
            Represents a prefix-URI pair used for defining namespaces
            </summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.NamespaceSpecification.#ctor(System.String,System.Uri)">
            <summary>Creates a new insance of <see cref="T:RomanticWeb.Ontologies.NamespaceSpecification"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.NamespaceSpecification.BaseUri">
            <summary>Gets the namespace URI.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.NamespaceSpecification.Prefix">
            <summary>Gets the namespace prefix.</summary>
        </member>
        <member name="T:RomanticWeb.Ontologies.ObjectProperty">
            <summary>
            An object property as defined by the OWL standard
            </summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.ObjectProperty.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:RomanticWeb.Ontologies.ObjectProperty"/>
            </summary>
        </member>
        <member name="T:RomanticWeb.Ontologies.Ontology">
            <summary>Encapsulates metadata about an ontology (like Foaf, Dublin Core, Rdfs, etc.).</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.#ctor(System.String,System.Uri,RomanticWeb.Ontologies.Term[])">
            <summary>Creates a new <see cref="T:RomanticWeb.Ontologies.Ontology"/> specification.</summary>
            <param name="prefix">Prefix of the ontology's base Uri.</param>
            <param name="baseUri">Ontology base Uri.</param>
            <param name="terms">A collection of RDF classes and properties</param>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.#ctor(System.String,System.String,System.Uri,RomanticWeb.Ontologies.Term[])">
            <summary>Creates a new <see cref="T:RomanticWeb.Ontologies.Ontology"/> specification.</summary>
            <param name="displayName">Display name of the ontology.</param>
            <param name="prefix">Prefix of the ontology's base Uri.</param>
            <param name="baseUri">Ontology base Uri.</param>
            <param name="terms">A collection of RDF classes and properties</param>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.#ctor(RomanticWeb.Ontologies.NamespaceSpecification,RomanticWeb.Ontologies.Term[])">
            <summary>Creates a new <see cref="T:RomanticWeb.Ontologies.Ontology"/> specification.</summary>
            <param name="namespace">Namespace prefix and base URI</param>
            <param name="terms">A collection of RDF classes and properties</param>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.#ctor(System.String,RomanticWeb.Ontologies.NamespaceSpecification,RomanticWeb.Ontologies.Term[])">
            <summary>Creates a new <see cref="T:RomanticWeb.Ontologies.Ontology"/> specification.</summary>
            <param name="displayName">Display name of the ontology.</param>
            <param name="namespace">Namespace prefix and base URI</param>
            <param name="terms">A collection of RDF classes and properties</param>
        </member>
        <member name="P:RomanticWeb.Ontologies.Ontology.Prefix">
            <summary>Gets the namespace prefix.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Ontology.DisplayName">
            <summary>Gets the display name.</summary>
            <remarks>This property is usually fed with dc:title or rdfs:label property.</remarks>
        </member>
        <member name="P:RomanticWeb.Ontologies.Ontology.BaseUri">
            <summary>Gets the ontology's base URI.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Ontology.Properties">
            <summary>Gets the ontology's properties.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Ontology.Classes">
            <summary>Gets the ontology's classes.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.op_Equality(RomanticWeb.Ontologies.Ontology,RomanticWeb.Ontologies.Ontology)">
            <summary>Tests for equality of two ontologies.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><b>true</b> if both ontologies has equal namespaces; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.op_Inequality(RomanticWeb.Ontologies.Ontology,RomanticWeb.Ontologies.Ontology)">
            <summary>Tests for inequality of two ontologies.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><b>true</b> if both ontologies has different namespaces; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.Ontology.Equals(RomanticWeb.Ontologies.Ontology)">
            <summary>Determines whether the specified ontology is equal to the ontology object.</summary>
            <param name="operand">Type: <see cref="T:RomanticWeb.Ontologies.Ontology" />
            The ontology to compare with the current ontology.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified ontology hase equal namespace with current ontology; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.OntologyFactory">
            <summary>Provides a centralized access to ontology provider factories.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyFactory.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Ontologies.OntologyFactory"/> class.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyFactory.Create(System.String)">
            <summary>Creates an ontology from given file path.</summary>
            <param name="path">File path containing a serialized ontology data.</param>
            <remarks>This method assumes that path can be converted to an URI, thus it is possible to pass both local file system and remote files.</remarks>
            <returns>Ontology beeing an object representation of given data.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyFactory.Create(System.String,System.String)">
            <summary>Creates an ontology from given file path.</summary>
            <param name="path">File path containing a serialized ontology data.</param>
            <param name="contentType">Explicitly passed content type of the data stored in the given stream.</param>
            <remarks>This method assumes that path can be converted to an URI, thus it is possible to pass both local file system and remote files.</remarks>
            <returns>Ontology beeing an object representation of given data.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyFactory.Create(System.IO.Stream)">
            <summary>Creates an ontology from given stream.</summary>
            <param name="fileStream">Stream containing a serialized ontology data.</param>
            <returns>Ontology beeing an object representation of given data.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyFactory.Create(System.IO.Stream,System.String)">
            <summary>Creates an ontology from given stream.</summary>
            <param name="fileStream">Stream containing a serialized ontology data.</param>
            <param name="contentType">Explicitly passed content type of the data stored in the given stream.</param>
            <returns>Ontology beeing an object representation of given data.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.OntologyProviderBase">
            <summary>Provides a base behavior for ontology providers.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyProviderBase.#ctor">
            <summary>Default parameterles constructor.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyProviderBase.#ctor(System.Collections.Generic.IEnumerable{RomanticWeb.Ontologies.IOntology})">
            <summary>Constructor with an enumeration of ontologies to be included</summary>
            <param name="ontologies"></param>
        </member>
        <member name="P:RomanticWeb.Ontologies.OntologyProviderBase.Ontologies">
            <summary>Get ontologies' metadata.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyProviderBase.ResolveUri(System.String,System.String)">
            <summary>Gets a URI from a QName.</summary>
        </member>
        <member name="T:RomanticWeb.Ontologies.OntologyProviderExtensions">
            <summary>Provides usefull <see cref="T:RomanticWeb.Ontologies.IOntologyProvider" /> extension methods.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyProviderExtensions.ResolveUri(RomanticWeb.Ontologies.IOntologyProvider,System.String)">
            <summary>Tries to resolve a prefix for given Uri.</summary>
            <param name="ontologies">Instance of the <see cref="T:RomanticWeb.Ontologies.IOntologyProvider"/>.</param>
            <param name="uriString">Uri to be resolved.</param>
            <returns><see cref="T:System.String" /> beeing a prefix of the given Uri or <b>null</b>.</returns>
        </member>
        <member name="M:RomanticWeb.Ontologies.OntologyProviderExtensions.ResolveUri(RomanticWeb.Ontologies.IOntologyProvider,System.Uri)">
            <summary>Tries to resolve a prefix for given <see cref="T:System.Uri"/>.</summary>
            <param name="ontologies">Instance of the <see cref="T:RomanticWeb.Ontologies.IOntologyProvider"/>.</param>
            <param name="uri">Uri to be resolved.</param>
            <returns><see cref="T:System.String" /> beeing a prefix of the given <see cref="T:System.Uri"/> or <b>null</b>.</returns>
        </member>
        <member name="T:RomanticWeb.Ontologies.Property">
            <summary>A base classs for RDF properties.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.Property.#ctor(System.String)">
            <summary>Creates a new Property. </summary>
        </member>
        <member name="T:RomanticWeb.Ontologies.Term">
            <summary>Base class for RDF terms (properties and classes).</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.Term.#ctor(System.String)">
            <summary>Creates a new instance of names RDF term.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Term.Uri">
            <summary>Gets the <see cref="T:RomanticWeb.Ontologies.Term"/>'s URI.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Term.Ontology">
            <summary>Gets the <see cref="P:RomanticWeb.Ontologies.Term.Ontology"/>, which defines this <see cref="T:RomanticWeb.Ontologies.Term"/>.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Term.Prefix">
            <summary>Gets the name of this term.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.Term.Name">
            <summary>Gets the term name.</summary>
            <remarks>Essentially it is a relative URI or hash part (depending on ontology namespace)</remarks>
        </member>
        <member name="T:RomanticWeb.Ontologies.XmlOntologyLoader">
            <summary>Converts an OWL based ontology written with XML syntax into an object representation.</summary>
        </member>
        <member name="P:RomanticWeb.Ontologies.XmlOntologyLoader.Accepts">
            <summary>Returns a list of accepted content MIME types handled by this factory.</summary>
        </member>
        <member name="M:RomanticWeb.Ontologies.XmlOntologyLoader.Create(System.IO.Stream)">
            <summary>Creates an ontology from given stream.</summary>
            <param name="fileStream"></param>
            <returns>Ontology filled with terms.</returns>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Cnt">
            <summary>Representing Content in RDF (http://www.w3.org/2011/content#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Dc">
            <summary>Dublin Core Metadata Element Set, Version 1.1 (http://purl.org/dc/elements/1.1/).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.DCTerms">
            <summary>DCMI metadata terms (http://purl.org/dc/terms/).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Foaf">
            <summary>Friend of a Friend (FOAF) vocabulary (http://xmlns.com/foaf/0.1/).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Ldp">
            <summary>The W3C Linked Data Platform (LDP) Vocabulary (http://www.w3.org/ns/ldp#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Owl">
            <summary>The OWL 2 Schema vocabulary (OWL 2) (http://www.w3.org/2002/07/owl#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Rdf">
            <summary>The RDF Vocabulary (RDF) (http://www.w3.org/1999/02/22-rdf-syntax-ns#).</summary>
            <summary>The Resource Description Framework vocabulary (http://www.w3.org/1999/02/22-rdf-syntax-ns#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Rdfs">
            <summary>The RDF Schema vocabulary (RDFS) (http://www.w3.org/2000/01/rdf-schema#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Sioc">
            <summary>SIOC Core Ontology Namespace (http://rdfs.org/sioc/ns#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Skos">
            <summary>SKOS Vocabulary (http://www.w3.org/2004/02/skos/core#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Sp">
            <summary>SPIN SPARQL Syntax (http://spinrdf.org/sp#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Spin">
            <summary>SPIN Modeling Vocabulary (http://spinrdf.org/spin#).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Schema">
            <summary>The schema.org vocabulary (http://schema.org/).</summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Xhtml">
            <summary>
            http://www.w3.org/1999/xhtml/
            </summary>
        </member>
        <member name="F:RomanticWeb.Vocabularies.Xhtml.BaseUri">
            <summary>
            The base URI
            </summary>
        </member>
        <member name="T:RomanticWeb.Vocabularies.Xsd">
            <summary>The XSD vocabulary (http://www.w3.org/2001/XMLSchema#).</summary>
        </member>
        <member name="T:RomanticWeb.StringExtensions">
            <summary>Provides useful string helper methods.</summary>
        </member>
        <member name="M:RomanticWeb.StringExtensions.Indent(System.String,System.Int32)">
            <summary>Indents given string with given depth.</summary>
            <param name="text">Text to be indented.</param>
            <param name="indentation">Depth of the indentation.</param>
            <remarks>This method removes all occurances of a carriage return characters and replaces all occurances of a new line character with a environment specific new line string and indentation.</remarks>
            <returns>Text with indentation.</returns>
        </member>
        <member name="M:RomanticWeb.StringExtensions.CamelCase(System.String)">
            <summary>Converts given text to camel case string.</summary>
            <param name="text">Input text.</param>
            <returns>Came case string or null.</returns>
        </member>
        <member name="M:RomanticWeb.StringExtensions.PascalCase(System.String)">
            <summary>Converts given text to pascal case string.</summary>
            <param name="text">Input text.</param>
            <returns>Pascal case string or null.</returns>
        </member>
        <member name="M:RomanticWeb.EntityStore.RemoveTriples(RomanticWeb.Model.INode,RomanticWeb.Model.INode,System.Uri,System.Globalization.CultureInfo)">
            <summary>Removes triple and blank node's subgraph if present.</summary>
            <returns>a value indicating that the was a blank node object value</returns>
        </member>
        <member name="T:RomanticWeb.AbsoluteUriComparer">
            <summary>Compares absolute Uris.</summary>
        </member>
        <member name="F:RomanticWeb.AbsoluteUriComparer.Default">
            <summary>Provides an easy access to the default instance of the <see cref="T:RomanticWeb.AbsoluteUriComparer" />.</summary>
        </member>
        <member name="M:RomanticWeb.AbsoluteUriComparer.Compare(System.Uri,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.AbsoluteUriComparer.Equals(System.Uri,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.AbsoluteUriComparer.GetHashCode(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.TypeComparer">
            <summary>Compares two types.</summary>
        </member>
        <member name="M:RomanticWeb.TypeComparer.System#Collections#Generic#IComparer{System#Type}#Compare(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Updates.DatasetChange">
            <summary>Represents a change to the triple store.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChange.#ctor(RomanticWeb.Entities.EntityId,RomanticWeb.Entities.EntityId)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Updates.DatasetChange"/> class, which affects a single graph.</summary>
            <param name="entity">The changed entity.</param>
            <param name="graph">The changed graph.</param>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChange.#ctor(RomanticWeb.Entities.EntityId)">
            <summary>Initializes a new instance of the <see cref="T:RomanticWeb.Updates.DatasetChange"/> class, which affects multiple graphs.</summary>
            <param name="entity">The changed entity.</param>
        </member>
        <member name="P:RomanticWeb.Updates.DatasetChange.Entity">
            <summary>Gets the entity, which was changed.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.DatasetChange.Graph">
            <summary>Gets the graph, which was changed.</summary>
            <returns>null if change affects multiple graphs</returns>
        </member>
        <member name="P:RomanticWeb.Updates.DatasetChange.IsEmpty">
            <summary>Gets a value indicating whether this instance actually represents a change to the store.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChange.CanMergeWith(RomanticWeb.Updates.IDatasetChange)">
            <summary>Determines whether this instance can be merged with another.</summary>
            <param name="other">The other change.</param>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChange.MergeWith(RomanticWeb.Updates.IDatasetChange)">
            <summary>Merges this change the with another change.</summary>
        </member>
        <member name="T:RomanticWeb.Updates.DatasetChanges">
            <summary>Represents ordered changes made in the triple store.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.DatasetChanges.HasChanges">
            <inheritdoc/>
        </member>
        <member name="P:RomanticWeb.Updates.DatasetChanges.Item(RomanticWeb.Entities.EntityId)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChanges.Add(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChanges.Clear">
            <inheritdoc/>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChanges.GetEnumerator">
            <summary>Gets the enumerator of changes.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.DatasetChanges.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator of changes grouped by named graphs.</summary>
        </member>
        <member name="T:RomanticWeb.Updates.EntityDelete">
            <summary>Represents a change, which deletes an entity.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.EntityDelete.ToString">
            <summary>Returns a description of the change.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.EntityDelete.CanMergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Updates.EntityDelete.MergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Updates.GraphReconstruct">
            <summary>Represents a change which recreates a named graph.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.GraphReconstruct.AddedQuads">
            <summary>Gets recreated graph's content.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.GraphReconstruct.IsEmpty">
            <summary>Checks if the graph reconstruction is required.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.GraphReconstruct.ToString">
            <summary>Returns a description of the change.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.GraphReconstruct.CanMergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Updates.GraphReconstruct.MergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Updates.GraphUpdate">
            <summary>Represents a change, which updates a named graph.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.GraphUpdate.RemovedQuads">
            <summary>Gets the removed quads.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.GraphUpdate.AddedQuads">
            <summary>Gets the added quads.</summary>
        </member>
        <member name="P:RomanticWeb.Updates.GraphUpdate.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Updates.GraphUpdate.ToString">
            <summary>Returns a description of the change.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.GraphUpdate.CanMergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Updates.GraphUpdate.MergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.Updates.IDatasetChangesTracker">
            <summary>Declares a contract for tracking changes made to the triple store.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.IDatasetChangesTracker.Add(RomanticWeb.Updates.IDatasetChange)">
            <summary>Adds a dataset change.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.IDatasetChangesTracker.Clear">
            <summary>Removes all pendeingchanges.</summary>
        </member>
        <member name="T:RomanticWeb.Updates.RemoveReferences">
            <summary>Represents a change, which removes triples, which reference <see cref="P:RomanticWeb.Updates.DatasetChange.Entity"/>.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.RemoveReferences.ToString">
            <summary>Returns a description of the change.</summary>
        </member>
        <member name="M:RomanticWeb.Updates.RemoveReferences.CanMergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="M:RomanticWeb.Updates.RemoveReferences.MergeWith(RomanticWeb.Updates.IDatasetChange)">
            <inheritdoc />
        </member>
        <member name="T:RomanticWeb.UriExtensions">
            <summary>Provides useful Uri extensions.</summary>
        </member>
        <member name="M:RomanticWeb.UriExtensions.GetFragmentOrLastSegment(System.Uri)">
            <summary>Returns fragment or last segment as entity name.</summary>
            <param name="uri">Uri to be parsed.</param>
            <returns><see cref="T:System.Uri" /> instance or <b>null</b> if the passed uri is also null.</returns>
        </member>
        <member name="M:RomanticWeb.UriExtensions.GetUriWithoutQuery(System.Uri)">
            <summary>Strips off an query string and fragment from a given <paramref name="uri" />.</summary>
            <param name="uri">Uri to be shortened.</param>
            <returns>Resulting uri without both query string and fragment.</returns>
        </member>
        <member name="T:System.Duration">
            <summary>This structure holds components of an Xsd Duration. It is used internally to support Xsd durations without loss of fidelity. Duration structures are immutable once they've been created.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Construct an Duration from time parts.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Construct an Duration from time parts.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Construct an Duration from date parts.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>Construct an Duration from date parts.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Construct an Duration from component parts.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.TimeSpan)">
            <summary>Construct an Duration from a TimeSpan value.</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.String)">
            <summary>Constructs an Duration from a string in the xsd:duration format. Components are stored with loss of fidelity (except in the case of overflow).</summary> 
        </member>
        <member name="M:System.Duration.#ctor(System.String,System.Duration.DurationType)">
            <summary>Constructs an Duration from a string in the xsd:duration format. Components are stored without loss of fidelity (except in the case of overflow).</summary>
        </member>
        <member name="M:System.Duration.#ctor(System.TimeSpan,System.Duration.DurationType)">
            <summary>Construct an Duration from a TimeSpan value that represents an xsd:duration, an xdt:dayTimeDuration, or an xdt:yearMonthDuration.</summary> 
        </member>
        <member name="T:System.Duration.DurationType">
            <summary>Determines the type of the duration.</summary>
        </member>
        <member name="F:System.Duration.DurationType.Duration">
            <summary>States that given duration has both date and time parts.</summary>
        </member>
        <member name="F:System.Duration.DurationType.YearMonthDuration">
            <summary>States that given duration has date part only.</summary>
        </member>
        <member name="F:System.Duration.DurationType.DayTimeDuration">
            <summary>States that given duration has time part only.</summary>
        </member>
        <member name="P:System.Duration.IsNegative">
            <summary>Return true if this duration is negative.</summary> 
        </member>
        <member name="P:System.Duration.Years">
            <summary>Return number of years in this duration (stored in 31 bits).</summary> 
        </member>
        <member name="P:System.Duration.Months">
            <summary>Return number of months in this duration (stored in 31 bits).</summary>
        </member>
        <member name="P:System.Duration.Days">
            <summary>Return number of days in this duration (stored in 31 bits). </summary>
        </member>
        <member name="P:System.Duration.Hours">
            <summary>Return number of hours in this duration (stored in 31 bits).</summary>
        </member>
        <member name="P:System.Duration.Minutes">
            <summary>Return number of minutes in this duration (stored in 31 bits).</summary>
        </member>
        <member name="P:System.Duration.Seconds">
            <summary>Return number of seconds in this duration (stored in 31 bits).</summary> 
        </member>
        <member name="P:System.Duration.Nanoseconds">
            <summary>Return number of nanoseconds in this duration.</summary> 
        </member>
        <member name="P:System.Duration.Microseconds">
            <summary>Return number of microseconds in this duration.</summary>
        </member>
        <member name="P:System.Duration.Milliseconds">
            <summary>Return number of milliseconds in this duration.</summary> 
        </member>
        <member name="M:System.Duration.op_Equality(System.Duration,System.Duration)">
            <summary>Compares two durations for equality.</summary>
            <param name="operandA">Left operand.</param>
            <param name="operandB">Right operand.</param>
            <returns><b>true</b> if all duration components are equal, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:System.Duration.op_Inequality(System.Duration,System.Duration)">
            <summary>Compares two durations for inequality.</summary>
            <param name="operandA">Left operand.</param>
            <param name="operandB">Right operand.</param>
            <returns><b>true</b> if any of the duration components is different, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:System.Duration.Parse(System.String)">
            <summary>Parses given string into a duration.</summary>
            <param name="duration">String with duration to be parsed.</param>
            <returns>Parsed duration.</returns>
        </member>
        <member name="M:System.Duration.TryParse(System.String,System.Duration@)">
            <summary>Tries to parse a given duration string into a duration.</summary>
            <param name="duration">String with duration to be parsed.</param>
            <param name="result">Output value.</param>
            <returns><b>true</b> if the parsing was completed successfuly, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:System.Duration.Normalize">
            <summary>Normalize year-month part and day-time part so that month &lt; 12, hour &lt; 24, minute &lt; 60, and second &lt; 60.</summary> 
        </member>
        <member name="M:System.Duration.ToString">
            <summary>Return the string representation of this duration.</summary> 
        </member>
        <member name="M:System.Duration.ToTimeSpan">
            <summary>Internal helper method that converts an Xsd duration to a TimeSpan value. This code uses the estimate that there are 365 days in the year and 30 days in a month.</summary> 
        </member>
        <member name="M:System.Duration.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>Type: <see cref="T:System.Int32" />
            A hash code for the current object.</returns>
        </member>
        <member name="M:System.Duration.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="operand">Type: <see cref="T:System.Object" />
            The object to compare with the current object.</param>
            <returns>Type: <see cref="T:System.Boolean" />
            <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:System.Duration.ToTimeSpan(System.Duration.DurationType)">
            <summary>Internal helper method that converts an Xsd duration to a TimeSpan value. This code uses the estimate that there are 365 days in the year and 30 days in a month.</summary>
        </member>
        <member name="M:System.Duration.ToString(System.Duration.DurationType)">
            <summary>Return the string representation according to xsd:duration rules, xdt:dayTimeDuration rules, or xdt:yearMonthDuration rules.</summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>Exposes useful <see cref="T:System.Type" /> extension methods.</summary>
        </member>
        <member name="M:System.TypeExtensions.IsEnumerable(System.Type)">
            <summary>Checks if the type can be assigned to the <see cref="T:System.Collections.IEnumerable" /> interface.</summary>
            <remarks>This method will return false for type <see cref="T:System.String" />.</remarks>
            <param name="type">Type to be checked.</param>
            <returns><b>true</b> if the type is <see cref="T:System.Array" /> or is assignable to <see cref="T:System.Collections.IEnumerable" /> (except <see cref="T:System.String" />); otherwise <b>false</b>.</returns>
        </member>
        <member name="M:System.TypeExtensions.FindItemType(System.Type)">
            <summary>Tries to resolve item type of complex types.</summary>
            <param name="type">Type to be resolved.</param>
            <returns>Collection item type or <b>null</b>.</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAssignableFromSpecificGeneric(System.Type,System.Type)">
            <summary>Checks if given generic type is assignable from other specific generic type.</summary>
            <param name="type">Type to assign to.</param>
            <param name="instanceType">Type to be assigned.</param>
            <returns><b>true</b> if specific generic type can be assigned to a generi type definition; otherwse <b>false</b>.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetGenericArgumentsFor(System.Type,System.Type)">
            <summary>Retrieves generic arguments for given specific generic type used in context of a generic type definition.</summary>
            <param name="type">Generic type definition to be checked against.</param>
            <param name="instanceType">Specific generic type to be analyzed.</param>
            <returns>Array of <see cref="T:System.Type" /> with generic type arguments of given specific generic type in context of a generic type definition.</returns>
        </member>
        <member name="M:System.TypeExtensions.ChangeItemType(System.Type,System.Type)">
            <summary>Changes item type in enumerable types.</summary>
            <param name="type">Enumerable type to change item type in.</param>
            <param name="newItemType">New item type.</param>
            <returns>New type with changed item type.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetImmediateParents(System.Type,System.Boolean)">
            <summary>
            Gets the direct parents of a type.
            </summary>
        </member>
    </members>
</doc>
